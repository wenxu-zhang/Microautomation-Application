// Created by Microsoft (R) C/C++ Compiler Version 10.00.30319.01 (f3d8cec9).
//
// f:\userdata\wenxu_data\program\eric roller's previous program\program\debug\mtbapi.tlh
//
// C++ source equivalent of Win32 type library MTBApi.tlb
// compiler-generated file created 12/09/16 at 10:50:15 - DO NOT EDIT!

//
// Cross-referenced type libraries:
//
//  #import "C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.tlb"
//

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace MTBApi {

//
// Forward references and typedefs
//

struct __declspec(uuid("ece98769-4e0e-42eb-8a82-0b8771a2c3ca"))
/* LIBID */ __MTBApi;
struct __declspec(uuid("ece98714-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBConnection;
struct __declspec(uuid("ece9873c-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dispinterface */ IMTBConnectionEvents;
struct /* coclass */ MTBConnection;
struct /* coclass */ UniqueRemotingIpcChannel;
struct __declspec(uuid("ece9870c-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBIdent;
struct __declspec(uuid("ece9870e-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBBase;
struct __declspec(uuid("ece98712-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBComponent;
struct __declspec(uuid("ece98703-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBChanger;
struct __declspec(uuid("ece98704-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dispinterface */ IMTBChangerEvents;
struct __declspec(uuid("ece98705-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBObjectiveChanger;
struct __declspec(uuid("ece9871e-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dispinterface */ IMTBObjectiveChangerEvents;
struct __declspec(uuid("ece98706-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBReflectorChanger;
struct __declspec(uuid("ece98745-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBShutter;
struct __declspec(uuid("ece98746-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBFilterChanger;
struct __declspec(uuid("ece98747-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBContrastChanger;
struct __declspec(uuid("ece98748-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBOptovarChanger;
struct __declspec(uuid("ece98749-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBLampChanger;
struct __declspec(uuid("ece9874a-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBCondenserFrontLensChanger;
struct __declspec(uuid("ece9877f-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTB2TVVisualCameraChanger;
struct __declspec(uuid("ece98780-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTB2TVCamerasChanger;
struct __declspec(uuid("ece98781-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBBaseportChanger;
struct __declspec(uuid("ece98782-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBSideportChanger;
struct __declspec(uuid("ece98789-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBRearportChanger;
struct __declspec(uuid("ece987b5-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBObservationModeChanger;
struct __declspec(uuid("ece9878b-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBIncubationTemperatureSwitch;
struct __declspec(uuid("ece987a5-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBFluorescenceLEDShutter;
struct __declspec(uuid("ece987a6-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dispinterface */ IMTBFluorescenceLEDShutterEvents;
struct __declspec(uuid("ece987cb-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBApertureChanger;
struct __declspec(uuid("ece98707-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBChangerElement;
struct __declspec(uuid("ece987e3-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBObjective;
struct __declspec(uuid("ece9872f-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBReflectorWavelengthArea;
struct __declspec(uuid("ece98709-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBReflector;
struct __declspec(uuid("ece9873e-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBOptovar;
struct __declspec(uuid("ece9873f-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBShutterState;
struct __declspec(uuid("ece98740-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBContrast;
struct __declspec(uuid("ece98741-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBFilter;
struct __declspec(uuid("ece98742-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBFrontLens;
struct __declspec(uuid("ece98743-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBMirror;
struct __declspec(uuid("ece98744-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBBeamSplitter;
struct __declspec(uuid("ece98767-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBRLTLSwitchState;
struct __declspec(uuid("ece987de-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBColorBeamSplitterWavelengthArea;
struct __declspec(uuid("ece9877e-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBColorBeamSplitter;
struct __declspec(uuid("ece9878a-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBComponentID;
struct __declspec(uuid("ece987b6-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBObservationMode;
struct __declspec(uuid("ece987c1-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBOnOffSwitchState;
struct __declspec(uuid("ece987c3-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBEmissionWavelengthArea;
struct __declspec(uuid("ece987c4-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBEmissionFilter;
struct __declspec(uuid("ece987c5-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBDichroicBeamSplitterWavelength;
struct __declspec(uuid("ece987c6-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBDichroicBeamSplitter;
struct __declspec(uuid("ece987ca-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBAperture;
struct __declspec(uuid("ece987cd-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBApoTomeGrid;
struct __declspec(uuid("ece987cf-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBExcitationWavelengthArea;
struct __declspec(uuid("ece987d0-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBExcitationFilter;
struct __declspec(uuid("ece98721-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBContinual;
struct __declspec(uuid("ece987c7-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBCSUSpinningDisk;
struct __declspec(uuid("ece987c8-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dispinterface */ IMTBCSUSpinningDiskEvents;
struct __declspec(uuid("ece98770-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBCoupledZoom;
struct __declspec(uuid("ece98771-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dispinterface */ IMTBCoupledZoomEvents;
struct __declspec(uuid("ece98724-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBMove;
struct __declspec(uuid("ece9872b-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBServo;
struct __declspec(uuid("ece98773-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBZoom;
struct __declspec(uuid("ece98784-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dispinterface */ IMTBZoomEvents;
struct __declspec(uuid("ece98774-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBCoupledZoomZoom;
struct __declspec(uuid("ece98728-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBLamp;
struct __declspec(uuid("ece98729-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dispinterface */ IMTBLampEvents;
struct __declspec(uuid("ece98778-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBTLHalogenLamp;
struct __declspec(uuid("ece98779-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBRLHalogenLamp;
struct __declspec(uuid("ece98775-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBFluorescenceLamp;
struct __declspec(uuid("ece98776-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dispinterface */ IMTBFluorescenceLampEvents;
struct __declspec(uuid("ece987ae-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBFluorescenceLED;
struct __declspec(uuid("ece987b0-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dispinterface */ IMTBFluorescenceLEDEvents;
struct __declspec(uuid("ece9879f-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBFluorescenceLEDControl;
struct __declspec(uuid("ece987a2-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dispinterface */ IMTBFluorescenceLEDControlEvents;
struct __declspec(uuid("ece9870a-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBConfiguration;
struct __declspec(uuid("ece987a9-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dispinterface */ IMTBConfigurationEvents;
struct __declspec(uuid("ece9870b-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBFwSettings;
struct __declspec(uuid("ece987a4-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBBeamCombiner;
struct __declspec(uuid("ece9874d-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBLightPathNode;
struct __declspec(uuid("ece987e4-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBMDSController;
struct __declspec(uuid("ece987e5-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dispinterface */ IMTBMDSControllerEvents;
struct __declspec(uuid("ece987d2-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBMultiChannelAOTF;
struct __declspec(uuid("ece987d3-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dispinterface */ IMTBMultiChannelAOTFEvents;
struct __declspec(uuid("ece987d4-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBLaserLine;
struct __declspec(uuid("ece987d5-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dispinterface */ IMTBLaserLineEvents;
struct __declspec(uuid("ece98713-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBDescriptors;
struct __declspec(uuid("ece98711-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBDevice;
struct __declspec(uuid("ece987bd-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBAxisTrigger;
struct __declspec(uuid("ece987bf-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dispinterface */ IMTBAxisTriggerEvents;
struct __declspec(uuid("ece98755-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBMicroscopeManager;
struct __declspec(uuid("ece98756-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dispinterface */ IMTBMicroscopeManagerEvents;
struct __declspec(uuid("ece9878c-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBIncubationSensor;
struct __declspec(uuid("ece98793-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dispinterface */ IMTBIncubationSensorEvents;
struct __declspec(uuid("ece9878d-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBIncubationChannel;
struct __declspec(uuid("ece98794-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dispinterface */ IMTBIncubationChannelEvents;
struct __declspec(uuid("ece9878e-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBIncubationCalibrationSensor;
struct __declspec(uuid("ece9878f-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBIncubationHumiditySensor;
struct __declspec(uuid("ece98790-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBIncubationTemperatureChannel;
struct __declspec(uuid("ece98791-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBIncubationCO2Channel;
struct __declspec(uuid("ece98795-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dispinterface */ IMTBIncubationCO2ChannelEvents;
struct __declspec(uuid("ece98796-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBIncubationAirHeaterChannel;
struct __declspec(uuid("ece98797-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBIncubationO2Channel;
struct __declspec(uuid("ece987ab-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBIncubationCirculatorChannel;
struct __declspec(uuid("ece987ac-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dispinterface */ IMTBIncubationCirculatorChannelEvents;
struct __declspec(uuid("ece98722-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dispinterface */ IMTBContinualEvents;
struct __declspec(uuid("ece987b2-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBFocusStabilizer;
struct __declspec(uuid("ece987b3-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dispinterface */ IMTBFocusStabilizerEvents;
struct __declspec(uuid("ece98783-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBUtil;
struct __declspec(uuid("ece98786-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBKeyFunctions;
struct __declspec(uuid("ece98787-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dispinterface */ IMTBKeyFunctionsEvents;
struct __declspec(uuid("ece98710-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBRoot;
struct __declspec(uuid("ece9870d-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dispinterface */ IMTBRootEvents;
struct __declspec(uuid("ece98753-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBObject;
struct __declspec(uuid("ece9874e-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBPort;
struct __declspec(uuid("ece9877a-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBMagnificationPort;
struct __declspec(uuid("ece9874f-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dispinterface */ IMTBMagnificationPortEvents;
struct __declspec(uuid("ece987e2-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBCameraAdapter;
struct __declspec(uuid("ece9874c-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBEyepiece;
struct __declspec(uuid("ece98750-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dispinterface */ IMTBEyepieceEvents;
struct __declspec(uuid("ece9877b-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBDigiport;
struct __declspec(uuid("ece987ce-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBDoubleCameraAdapter;
struct __declspec(uuid("ece98737-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dispinterface */ IMTBMoveEvents;
enum MTBExceptionCode;
struct /* coclass */ MTBException;
struct __declspec(uuid("ece987dd-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBBatchCommander;
enum MTBLightPathLocations;
enum MTBApoTomeHWTriggerCondition;
enum MTBContrastManagerContrastMethods;
enum MTBContrastManagerModes;
enum MTBLightManagerModes;
enum MTBApoTomeOperationState;
enum MTBOnOff;
enum MTBLoadWorkPosition;
enum MTBCalibrationModes;
enum MTBDirection;
enum MTBObjectiveImmersionTypes;
enum MTBContrastTypes;
enum MTBObjectiveFeatures;
enum MTBLimits;
enum MTBCmdSetModes;
enum MTBMotorization;
enum MTBSaturationType;
enum MTBFluorescenceLEDOperationMode;
enum MTBFluorescenceLEDTriggerMode;
enum MTBFocusStabilizerPeriodicallyOnOffChangedReason;
enum MTBFocusStabilizerDataType;
enum MTBObservationMode;
enum MTBAxisTriggerMode;
enum MTBAOTFControlMode;
enum MTBLampType;
enum MTBAOTFFunctions;
enum MTBAccessibility;
enum MTBReflectorFeatures;
enum MTBLaserSafety;
struct __declspec(uuid("ece9870f-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dispinterface */ IMTBBaseEvents;
struct __declspec(uuid("ece987d1-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBTirfAngularAdjust;
struct __declspec(uuid("ece98736-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBContinualSpeed;
struct __declspec(uuid("ece98725-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dispinterface */ IMTBContinualSpeedEvents;
struct __declspec(uuid("ece98758-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBApoTome;
struct __declspec(uuid("ece9875c-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dispinterface */ IMTBApoTomeEvents;
struct __declspec(uuid("ece9875d-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBApoTomeServo;
struct __declspec(uuid("ece9875e-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dispinterface */ IMTBApoTomeServoEvents;
struct __declspec(uuid("ece98760-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBApoTomePhase;
struct __declspec(uuid("ece98761-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dispinterface */ IMTBApoTomePhaseEvents;
struct __declspec(uuid("ece9875f-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBApoTomeFocus;
struct __declspec(uuid("ece987cc-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBApoTomeGridChanger;
struct __declspec(uuid("ece98731-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBAxis;
struct __declspec(uuid("ece98734-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dispinterface */ IMTBAxisEvents;
struct __declspec(uuid("ece98717-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBStage;
struct __declspec(uuid("ece9873a-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dispinterface */ IMTBStageEvents;
struct __declspec(uuid("ece98766-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBStageAxis;
struct __declspec(uuid("ece98739-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBFocus;
struct __declspec(uuid("ece987df-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBCameraInfo;
struct __declspec(uuid("ece987e0-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dispinterface */ IMTBCameraInfoEvents;
struct __declspec(uuid("ece9871a-4e0e-42eb-8a82-0b8771a2c3ca"))
/* dual interface */ IMTBEventSink;
struct /* coclass */ MTBEventSink;
struct /* coclass */ MTBBaseEventSink;
struct /* coclass */ MTBRootEventSink;
struct /* coclass */ MTBChangerEventSink;
struct /* coclass */ MTBObjectiveChangerEventSink;
struct /* coclass */ MTBConnectionEventSink;
struct /* coclass */ MTBConfigurationEventSink;
struct /* coclass */ MTBContinualEventSink;
struct /* coclass */ MTBMoveEventSink;
struct /* coclass */ MTBContinualSpeedEventSink;
struct /* coclass */ MTBLampEventSink;
struct /* coclass */ MTBFluorescenceLampEventSink;
struct /* coclass */ MTBAxisEventSink;
struct /* coclass */ MTBStageEventSink;
struct /* coclass */ MTBMagnificationPortEventSink;
struct /* coclass */ MTBEyepieceEventSink;
struct /* coclass */ MTBMicroscopeManagerEventSink;
struct /* coclass */ MTBApoTomeEventSink;
struct /* coclass */ MTBApoTomeServoEventSink;
struct /* coclass */ MTBApoTomePhaseEventSink;
struct /* coclass */ MTBCoupledZoomEventSink;
struct /* coclass */ MTBKeyFunctionsEventSink;
struct /* coclass */ MTBIncubationSensorEventSink;
struct /* coclass */ MTBIncubationChannelEventSink;
struct /* coclass */ MTBIncubationCO2ChannelEventSink;
struct /* coclass */ MTBIncubationCirculatorChannelEventSink;
struct /* coclass */ MTBFluorescenceLEDEventSink;
struct /* coclass */ MTBFluorescenceLEDControlEventSink;
struct /* coclass */ MTBFluorescenceLEDShutterEventSink;
struct /* coclass */ MTBFocusStabilizerEventSink;
struct /* coclass */ MTBAxisTriggerEventSink;
struct /* coclass */ MTBCSUSpinningDiskEventSink;
struct /* coclass */ MTBMDSControllerEventSink;
struct /* coclass */ MTBMultiChannelAOTFEventSink;
struct /* coclass */ MTBLaserLineEventSink;
struct /* coclass */ MTBCameraInfoEventSink;
struct /* coclass */ MTBZoomEventSink;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IMTBConnectionEvents, __uuidof(IMTBConnectionEvents));
_COM_SMARTPTR_TYPEDEF(IMTBIdent, __uuidof(IMTBIdent));
_COM_SMARTPTR_TYPEDEF(IMTBBase, __uuidof(IMTBBase));
_COM_SMARTPTR_TYPEDEF(IMTBChangerEvents, __uuidof(IMTBChangerEvents));
_COM_SMARTPTR_TYPEDEF(IMTBObjectiveChanger, __uuidof(IMTBObjectiveChanger));
_COM_SMARTPTR_TYPEDEF(IMTBObjectiveChangerEvents, __uuidof(IMTBObjectiveChangerEvents));
_COM_SMARTPTR_TYPEDEF(IMTBReflectorChanger, __uuidof(IMTBReflectorChanger));
_COM_SMARTPTR_TYPEDEF(IMTBFilterChanger, __uuidof(IMTBFilterChanger));
_COM_SMARTPTR_TYPEDEF(IMTBContrastChanger, __uuidof(IMTBContrastChanger));
_COM_SMARTPTR_TYPEDEF(IMTBOptovarChanger, __uuidof(IMTBOptovarChanger));
_COM_SMARTPTR_TYPEDEF(IMTBLampChanger, __uuidof(IMTBLampChanger));
_COM_SMARTPTR_TYPEDEF(IMTBCondenserFrontLensChanger, __uuidof(IMTBCondenserFrontLensChanger));
_COM_SMARTPTR_TYPEDEF(IMTB2TVVisualCameraChanger, __uuidof(IMTB2TVVisualCameraChanger));
_COM_SMARTPTR_TYPEDEF(IMTB2TVCamerasChanger, __uuidof(IMTB2TVCamerasChanger));
_COM_SMARTPTR_TYPEDEF(IMTBBaseportChanger, __uuidof(IMTBBaseportChanger));
_COM_SMARTPTR_TYPEDEF(IMTBSideportChanger, __uuidof(IMTBSideportChanger));
_COM_SMARTPTR_TYPEDEF(IMTBRearportChanger, __uuidof(IMTBRearportChanger));
_COM_SMARTPTR_TYPEDEF(IMTBObservationModeChanger, __uuidof(IMTBObservationModeChanger));
_COM_SMARTPTR_TYPEDEF(IMTBIncubationTemperatureSwitch, __uuidof(IMTBIncubationTemperatureSwitch));
_COM_SMARTPTR_TYPEDEF(IMTBFluorescenceLEDShutter, __uuidof(IMTBFluorescenceLEDShutter));
_COM_SMARTPTR_TYPEDEF(IMTBFluorescenceLEDShutterEvents, __uuidof(IMTBFluorescenceLEDShutterEvents));
_COM_SMARTPTR_TYPEDEF(IMTBApertureChanger, __uuidof(IMTBApertureChanger));
_COM_SMARTPTR_TYPEDEF(IMTBChangerElement, __uuidof(IMTBChangerElement));
_COM_SMARTPTR_TYPEDEF(IMTBReflectorWavelengthArea, __uuidof(IMTBReflectorWavelengthArea));
_COM_SMARTPTR_TYPEDEF(IMTBOptovar, __uuidof(IMTBOptovar));
_COM_SMARTPTR_TYPEDEF(IMTBShutterState, __uuidof(IMTBShutterState));
_COM_SMARTPTR_TYPEDEF(IMTBFilter, __uuidof(IMTBFilter));
_COM_SMARTPTR_TYPEDEF(IMTBFrontLens, __uuidof(IMTBFrontLens));
_COM_SMARTPTR_TYPEDEF(IMTBMirror, __uuidof(IMTBMirror));
_COM_SMARTPTR_TYPEDEF(IMTBBeamSplitter, __uuidof(IMTBBeamSplitter));
_COM_SMARTPTR_TYPEDEF(IMTBColorBeamSplitterWavelengthArea, __uuidof(IMTBColorBeamSplitterWavelengthArea));
_COM_SMARTPTR_TYPEDEF(IMTBColorBeamSplitter, __uuidof(IMTBColorBeamSplitter));
_COM_SMARTPTR_TYPEDEF(IMTBComponentID, __uuidof(IMTBComponentID));
_COM_SMARTPTR_TYPEDEF(IMTBEmissionWavelengthArea, __uuidof(IMTBEmissionWavelengthArea));
_COM_SMARTPTR_TYPEDEF(IMTBEmissionFilter, __uuidof(IMTBEmissionFilter));
_COM_SMARTPTR_TYPEDEF(IMTBDichroicBeamSplitterWavelength, __uuidof(IMTBDichroicBeamSplitterWavelength));
_COM_SMARTPTR_TYPEDEF(IMTBDichroicBeamSplitter, __uuidof(IMTBDichroicBeamSplitter));
_COM_SMARTPTR_TYPEDEF(IMTBAperture, __uuidof(IMTBAperture));
_COM_SMARTPTR_TYPEDEF(IMTBApoTomeGrid, __uuidof(IMTBApoTomeGrid));
_COM_SMARTPTR_TYPEDEF(IMTBExcitationWavelengthArea, __uuidof(IMTBExcitationWavelengthArea));
_COM_SMARTPTR_TYPEDEF(IMTBExcitationFilter, __uuidof(IMTBExcitationFilter));
_COM_SMARTPTR_TYPEDEF(IMTBCSUSpinningDiskEvents, __uuidof(IMTBCSUSpinningDiskEvents));
_COM_SMARTPTR_TYPEDEF(IMTBCoupledZoomEvents, __uuidof(IMTBCoupledZoomEvents));
_COM_SMARTPTR_TYPEDEF(IMTBMove, __uuidof(IMTBMove));
_COM_SMARTPTR_TYPEDEF(IMTBServo, __uuidof(IMTBServo));
_COM_SMARTPTR_TYPEDEF(IMTBZoom, __uuidof(IMTBZoom));
_COM_SMARTPTR_TYPEDEF(IMTBZoomEvents, __uuidof(IMTBZoomEvents));
_COM_SMARTPTR_TYPEDEF(IMTBCoupledZoomZoom, __uuidof(IMTBCoupledZoomZoom));
_COM_SMARTPTR_TYPEDEF(IMTBLampEvents, __uuidof(IMTBLampEvents));
_COM_SMARTPTR_TYPEDEF(IMTBTLHalogenLamp, __uuidof(IMTBTLHalogenLamp));
_COM_SMARTPTR_TYPEDEF(IMTBRLHalogenLamp, __uuidof(IMTBRLHalogenLamp));
_COM_SMARTPTR_TYPEDEF(IMTBFluorescenceLampEvents, __uuidof(IMTBFluorescenceLampEvents));
_COM_SMARTPTR_TYPEDEF(IMTBFluorescenceLED, __uuidof(IMTBFluorescenceLED));
_COM_SMARTPTR_TYPEDEF(IMTBFluorescenceLEDEvents, __uuidof(IMTBFluorescenceLEDEvents));
_COM_SMARTPTR_TYPEDEF(IMTBFluorescenceLEDControlEvents, __uuidof(IMTBFluorescenceLEDControlEvents));
_COM_SMARTPTR_TYPEDEF(IMTBConfiguration, __uuidof(IMTBConfiguration));
_COM_SMARTPTR_TYPEDEF(IMTBConfigurationEvents, __uuidof(IMTBConfigurationEvents));
_COM_SMARTPTR_TYPEDEF(IMTBFwSettings, __uuidof(IMTBFwSettings));
_COM_SMARTPTR_TYPEDEF(IMTBBeamCombiner, __uuidof(IMTBBeamCombiner));
_COM_SMARTPTR_TYPEDEF(IMTBMDSControllerEvents, __uuidof(IMTBMDSControllerEvents));
_COM_SMARTPTR_TYPEDEF(IMTBMultiChannelAOTFEvents, __uuidof(IMTBMultiChannelAOTFEvents));
_COM_SMARTPTR_TYPEDEF(IMTBLaserLine, __uuidof(IMTBLaserLine));
_COM_SMARTPTR_TYPEDEF(IMTBLaserLineEvents, __uuidof(IMTBLaserLineEvents));
_COM_SMARTPTR_TYPEDEF(IMTBDescriptors, __uuidof(IMTBDescriptors));
_COM_SMARTPTR_TYPEDEF(IMTBAxisTriggerEvents, __uuidof(IMTBAxisTriggerEvents));
_COM_SMARTPTR_TYPEDEF(IMTBMicroscopeManagerEvents, __uuidof(IMTBMicroscopeManagerEvents));
_COM_SMARTPTR_TYPEDEF(IMTBIncubationSensor, __uuidof(IMTBIncubationSensor));
_COM_SMARTPTR_TYPEDEF(IMTBIncubationSensorEvents, __uuidof(IMTBIncubationSensorEvents));
_COM_SMARTPTR_TYPEDEF(IMTBIncubationChannelEvents, __uuidof(IMTBIncubationChannelEvents));
_COM_SMARTPTR_TYPEDEF(IMTBIncubationCalibrationSensor, __uuidof(IMTBIncubationCalibrationSensor));
_COM_SMARTPTR_TYPEDEF(IMTBIncubationHumiditySensor, __uuidof(IMTBIncubationHumiditySensor));
_COM_SMARTPTR_TYPEDEF(IMTBIncubationTemperatureChannel, __uuidof(IMTBIncubationTemperatureChannel));
_COM_SMARTPTR_TYPEDEF(IMTBIncubationCO2ChannelEvents, __uuidof(IMTBIncubationCO2ChannelEvents));
_COM_SMARTPTR_TYPEDEF(IMTBIncubationAirHeaterChannel, __uuidof(IMTBIncubationAirHeaterChannel));
_COM_SMARTPTR_TYPEDEF(IMTBIncubationO2Channel, __uuidof(IMTBIncubationO2Channel));
_COM_SMARTPTR_TYPEDEF(IMTBIncubationCirculatorChannel, __uuidof(IMTBIncubationCirculatorChannel));
_COM_SMARTPTR_TYPEDEF(IMTBIncubationCirculatorChannelEvents, __uuidof(IMTBIncubationCirculatorChannelEvents));
_COM_SMARTPTR_TYPEDEF(IMTBContinualEvents, __uuidof(IMTBContinualEvents));
_COM_SMARTPTR_TYPEDEF(IMTBFocusStabilizerEvents, __uuidof(IMTBFocusStabilizerEvents));
_COM_SMARTPTR_TYPEDEF(IMTBUtil, __uuidof(IMTBUtil));
_COM_SMARTPTR_TYPEDEF(IMTBKeyFunctions, __uuidof(IMTBKeyFunctions));
_COM_SMARTPTR_TYPEDEF(IMTBKeyFunctionsEvents, __uuidof(IMTBKeyFunctionsEvents));
_COM_SMARTPTR_TYPEDEF(IMTBRootEvents, __uuidof(IMTBRootEvents));
_COM_SMARTPTR_TYPEDEF(IMTBObject, __uuidof(IMTBObject));
_COM_SMARTPTR_TYPEDEF(IMTBPort, __uuidof(IMTBPort));
_COM_SMARTPTR_TYPEDEF(IMTBMagnificationPort, __uuidof(IMTBMagnificationPort));
_COM_SMARTPTR_TYPEDEF(IMTBMagnificationPortEvents, __uuidof(IMTBMagnificationPortEvents));
_COM_SMARTPTR_TYPEDEF(IMTBCameraAdapter, __uuidof(IMTBCameraAdapter));
_COM_SMARTPTR_TYPEDEF(IMTBEyepiece, __uuidof(IMTBEyepiece));
_COM_SMARTPTR_TYPEDEF(IMTBEyepieceEvents, __uuidof(IMTBEyepieceEvents));
_COM_SMARTPTR_TYPEDEF(IMTBDigiport, __uuidof(IMTBDigiport));
_COM_SMARTPTR_TYPEDEF(IMTBDoubleCameraAdapter, __uuidof(IMTBDoubleCameraAdapter));
_COM_SMARTPTR_TYPEDEF(IMTBMoveEvents, __uuidof(IMTBMoveEvents));
_COM_SMARTPTR_TYPEDEF(IMTBRLTLSwitchState, __uuidof(IMTBRLTLSwitchState));
_COM_SMARTPTR_TYPEDEF(IMTBOnOffSwitchState, __uuidof(IMTBOnOffSwitchState));
_COM_SMARTPTR_TYPEDEF(IMTBContrast, __uuidof(IMTBContrast));
_COM_SMARTPTR_TYPEDEF(IMTBObjective, __uuidof(IMTBObjective));
_COM_SMARTPTR_TYPEDEF(IMTBChanger, __uuidof(IMTBChanger));
_COM_SMARTPTR_TYPEDEF(IMTBShutter, __uuidof(IMTBShutter));
_COM_SMARTPTR_TYPEDEF(IMTBContinual, __uuidof(IMTBContinual));
_COM_SMARTPTR_TYPEDEF(IMTBCSUSpinningDisk, __uuidof(IMTBCSUSpinningDisk));
_COM_SMARTPTR_TYPEDEF(IMTBCoupledZoom, __uuidof(IMTBCoupledZoom));
_COM_SMARTPTR_TYPEDEF(IMTBFluorescenceLamp, __uuidof(IMTBFluorescenceLamp));
_COM_SMARTPTR_TYPEDEF(IMTBIncubationChannel, __uuidof(IMTBIncubationChannel));
_COM_SMARTPTR_TYPEDEF(IMTBBatchCommander, __uuidof(IMTBBatchCommander));
_COM_SMARTPTR_TYPEDEF(IMTBIncubationCO2Channel, __uuidof(IMTBIncubationCO2Channel));
_COM_SMARTPTR_TYPEDEF(IMTBFluorescenceLEDControl, __uuidof(IMTBFluorescenceLEDControl));
_COM_SMARTPTR_TYPEDEF(IMTBFocusStabilizer, __uuidof(IMTBFocusStabilizer));
_COM_SMARTPTR_TYPEDEF(IMTBObservationMode, __uuidof(IMTBObservationMode));
_COM_SMARTPTR_TYPEDEF(IMTBAxisTrigger, __uuidof(IMTBAxisTrigger));
_COM_SMARTPTR_TYPEDEF(IMTBMDSController, __uuidof(IMTBMDSController));
_COM_SMARTPTR_TYPEDEF(IMTBLamp, __uuidof(IMTBLamp));
_COM_SMARTPTR_TYPEDEF(IMTBMultiChannelAOTF, __uuidof(IMTBMultiChannelAOTF));
_COM_SMARTPTR_TYPEDEF(IMTBReflector, __uuidof(IMTBReflector));
_COM_SMARTPTR_TYPEDEF(IMTBMicroscopeManager, __uuidof(IMTBMicroscopeManager));
_COM_SMARTPTR_TYPEDEF(IMTBBaseEvents, __uuidof(IMTBBaseEvents));
_COM_SMARTPTR_TYPEDEF(IMTBTirfAngularAdjust, __uuidof(IMTBTirfAngularAdjust));
_COM_SMARTPTR_TYPEDEF(IMTBContinualSpeed, __uuidof(IMTBContinualSpeed));
_COM_SMARTPTR_TYPEDEF(IMTBContinualSpeedEvents, __uuidof(IMTBContinualSpeedEvents));
_COM_SMARTPTR_TYPEDEF(IMTBApoTomeEvents, __uuidof(IMTBApoTomeEvents));
_COM_SMARTPTR_TYPEDEF(IMTBApoTomeServo, __uuidof(IMTBApoTomeServo));
_COM_SMARTPTR_TYPEDEF(IMTBApoTomeServoEvents, __uuidof(IMTBApoTomeServoEvents));
_COM_SMARTPTR_TYPEDEF(IMTBApoTomePhase, __uuidof(IMTBApoTomePhase));
_COM_SMARTPTR_TYPEDEF(IMTBApoTomePhaseEvents, __uuidof(IMTBApoTomePhaseEvents));
_COM_SMARTPTR_TYPEDEF(IMTBApoTomeFocus, __uuidof(IMTBApoTomeFocus));
_COM_SMARTPTR_TYPEDEF(IMTBApoTome, __uuidof(IMTBApoTome));
_COM_SMARTPTR_TYPEDEF(IMTBApoTomeGridChanger, __uuidof(IMTBApoTomeGridChanger));
_COM_SMARTPTR_TYPEDEF(IMTBAxis, __uuidof(IMTBAxis));
_COM_SMARTPTR_TYPEDEF(IMTBAxisEvents, __uuidof(IMTBAxisEvents));
_COM_SMARTPTR_TYPEDEF(IMTBStageEvents, __uuidof(IMTBStageEvents));
_COM_SMARTPTR_TYPEDEF(IMTBStageAxis, __uuidof(IMTBStageAxis));
_COM_SMARTPTR_TYPEDEF(IMTBStage, __uuidof(IMTBStage));
_COM_SMARTPTR_TYPEDEF(IMTBFocus, __uuidof(IMTBFocus));
_COM_SMARTPTR_TYPEDEF(IMTBCameraInfo, __uuidof(IMTBCameraInfo));
_COM_SMARTPTR_TYPEDEF(IMTBCameraInfoEvents, __uuidof(IMTBCameraInfoEvents));
_COM_SMARTPTR_TYPEDEF(IMTBEventSink, __uuidof(IMTBEventSink));
_COM_SMARTPTR_TYPEDEF(IMTBConnection, __uuidof(IMTBConnection));
_COM_SMARTPTR_TYPEDEF(IMTBComponent, __uuidof(IMTBComponent));
_COM_SMARTPTR_TYPEDEF(IMTBLightPathNode, __uuidof(IMTBLightPathNode));
_COM_SMARTPTR_TYPEDEF(IMTBDevice, __uuidof(IMTBDevice));
_COM_SMARTPTR_TYPEDEF(IMTBRoot, __uuidof(IMTBRoot));

//
// Type library items
//

struct __declspec(uuid("ece9873c-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBConnectionEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT MTBConnectionPossibleEvent ( );
    HRESULT MTBConfigMismatchEvent (
        SAFEARRAY * componentNames );
};

struct __declspec(uuid("ece98716-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBConnection;
    // interface _Object
    // [ default ] interface IMTBConnection

struct __declspec(uuid("ece9879b-4e0e-42eb-8a82-0b8771a2c3ca"))
UniqueRemotingIpcChannel;
    // interface _Object
    // [ default ] interface IChannelReceiver
    // interface IChannel
    // interface IChannelSender

struct __declspec(uuid("ece9870c-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBIdent : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetConfigurationHasChanged))
    VARIANT_BOOL ConfigurationHasChanged;
    __declspec(property(get=GetUniqueName))
    _bstr_t UniqueName;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    _bstr_t GetConfiguration ( );
    VARIANT_BOOL GetConfigurationHasChanged ( );
    _bstr_t GetUniqueName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetConfiguration (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConfigurationHasChanged (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_UniqueName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("ece9870e-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBBase : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsMonitoring))
    VARIANT_BOOL IsMonitoring;
    __declspec(property(get=GetIsLocked))
    VARIANT_BOOL IsLocked;
    __declspec(property(get=GetIsBusy))
    VARIANT_BOOL IsBusy;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL StartMonitoring (
        _bstr_t clientID );
    VARIANT_BOOL StopMonitoring (
        _bstr_t clientID );
    VARIANT_BOOL GetIsMonitoring ( );
    VARIANT_BOOL IsMonitoringForClient (
        _bstr_t clientID );
    VARIANT_BOOL Lock (
        _bstr_t clientID );
    VARIANT_BOOL Unlock (
        _bstr_t clientID );
    VARIANT_BOOL GetIsLocked ( );
    VARIANT_BOOL IsLockedForClient (
        _bstr_t clientID );
    VARIANT_BOOL WaitReady (
        long timeout );
    VARIANT_BOOL GetIsBusy ( );
    HRESULT add_MTBErrorEvent (
        IUnknown * value );
    HRESULT remove_MTBErrorEvent (
        IUnknown * value );
    HRESULT add_MTBLockingChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBLockingChangedEvent (
        IUnknown * value );
    HRESULT add_MTBMonitoringChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBMonitoringChangedEvent (
        IUnknown * value );
    HRESULT add_MTBBusyChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBBusyChangedEvent (
        IUnknown * value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_StartMonitoring (
        /*[in]*/ BSTR clientID,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_StopMonitoring (
        /*[in]*/ BSTR clientID,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsMonitoring (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsMonitoringForClient (
        /*[in]*/ BSTR clientID,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Lock (
        /*[in]*/ BSTR clientID,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Unlock (
        /*[in]*/ BSTR clientID,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsLocked (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsLockedForClient (
        /*[in]*/ BSTR clientID,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_WaitReady (
        /*[in]*/ long timeout,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsBusy (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_add_MTBErrorEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBErrorEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBLockingChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBLockingChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBMonitoringChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBMonitoringChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBBusyChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBBusyChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
};

struct __declspec(uuid("ece98704-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBChangerEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT MTBPositionChangedEvent (
        short Position );
    HRESULT MTBTargetPositionChangedEvent (
        short targetPosition );
    HRESULT MTBPositionSettledEvent (
        short Position );
    HRESULT MTBElementConfigurationChangedEvent ( );
    HRESULT MTBElementConfigurationFinishedEvent ( );
};

struct __declspec(uuid("ece98705-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBObjectiveChanger : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHasOilStop))
    VARIANT_BOOL HasOilStop;
    __declspec(property(get=GetOilStopActive))
    VARIANT_BOOL OilStopActive;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetHasOilStop ( );
    VARIANT_BOOL GetOilStopActive ( );
    HRESULT add_MTBOilStopChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBOilStopChangedEvent (
        IUnknown * value );
    _bstr_t GetUniqueNameFromName (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_HasOilStop (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OilStopActive (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_add_MTBOilStopChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBOilStopChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_GetUniqueNameFromName (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("ece9871e-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBObjectiveChangerEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT MTBOilStopChangedEvent (
        VARIANT_BOOL state );
};

struct __declspec(uuid("ece98706-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBReflectorChanger : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetUniqueNameFromName (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetUniqueNameFromName (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("ece98746-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBFilterChanger : IDispatch
{};

struct __declspec(uuid("ece98747-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBContrastChanger : IDispatch
{};

struct __declspec(uuid("ece98748-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBOptovarChanger : IDispatch
{};

struct __declspec(uuid("ece98749-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBLampChanger : IDispatch
{};

struct __declspec(uuid("ece9874a-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBCondenserFrontLensChanger : IDispatch
{};

struct __declspec(uuid("ece9877f-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTB2TVVisualCameraChanger : IDispatch
{};

struct __declspec(uuid("ece98780-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTB2TVCamerasChanger : IDispatch
{};

struct __declspec(uuid("ece98781-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBBaseportChanger : IDispatch
{};

struct __declspec(uuid("ece98782-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBSideportChanger : IDispatch
{};

struct __declspec(uuid("ece98789-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBRearportChanger : IDispatch
{};

struct __declspec(uuid("ece987b5-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBObservationModeChanger : IDispatch
{};

struct __declspec(uuid("ece9878b-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBIncubationTemperatureSwitch : IDispatch
{};

struct __declspec(uuid("ece987a5-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBFluorescenceLEDShutter : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL SetTriggerChannel (
        unsigned char triggerChannelNumber );
    unsigned char GetTriggerChannel ( );
    HRESULT add_MTBTriggerChannelChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBTriggerChannelChangedEvent (
        IUnknown * value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetTriggerChannel (
        /*[in]*/ unsigned char triggerChannelNumber,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetTriggerChannel (
        /*[out,retval]*/ unsigned char * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_add_MTBTriggerChannelChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBTriggerChannelChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
};

struct __declspec(uuid("ece987a6-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBFluorescenceLEDShutterEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT MTBTriggerChannelChangedEvent (
        unsigned char triggerChannelNumber );
};

struct __declspec(uuid("ece987cb-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBApertureChanger : IDispatch
{};

struct __declspec(uuid("ece98707-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBChangerElement : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetElementType))
    _bstr_t ElementType;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetElementType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ElementType (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("ece9872f-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBReflectorWavelengthArea : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetExcitationLow))
    short ExcitationLow;
    __declspec(property(get=GetExcitationHigh))
    short ExcitationHigh;
    __declspec(property(get=GetBeamSplitter))
    short BeamSplitter;
    __declspec(property(get=GetEmissionLow))
    short EmissionLow;
    __declspec(property(get=GetEmissionHigh))
    short EmissionHigh;

    //
    // Wrapper methods for error-handling
    //

    short GetExcitationLow ( );
    short GetExcitationHigh ( );
    short GetBeamSplitter ( );
    short GetEmissionLow ( );
    short GetEmissionHigh ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ExcitationLow (
        /*[out,retval]*/ short * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ExcitationHigh (
        /*[out,retval]*/ short * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BeamSplitter (
        /*[out,retval]*/ short * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmissionLow (
        /*[out,retval]*/ short * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmissionHigh (
        /*[out,retval]*/ short * pRetVal ) = 0;
};

struct __declspec(uuid("ece9873e-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBOptovar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMagnification))
    double Magnification;

    //
    // Wrapper methods for error-handling
    //

    double GetMagnification ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Magnification (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("ece9873f-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBShutterState : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOpen))
    VARIANT_BOOL Open;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetOpen ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Open (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("ece98741-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTransmission))
    double Transmission;

    //
    // Wrapper methods for error-handling
    //

    double GetTransmission ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Transmission (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("ece98742-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBFrontLens : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSwungIn))
    VARIANT_BOOL SwungIn;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetSwungIn ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SwungIn (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("ece98743-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBMirror : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSuccessorID))
    _bstr_t SuccessorID;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetSuccessorID ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SuccessorID (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("ece98744-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBBeamSplitter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSuccessor1ID))
    _bstr_t Successor1ID;
    __declspec(property(get=GetSuccessor2ID))
    _bstr_t Successor2ID;
    __declspec(property(get=GetSplittingRatioSuccessor1))
    double SplittingRatioSuccessor1;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetSuccessor1ID ( );
    _bstr_t GetSuccessor2ID ( );
    double GetSplittingRatioSuccessor1 ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Successor1ID (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Successor2ID (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SplittingRatioSuccessor1 (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("ece987de-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBColorBeamSplitterWavelengthArea : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBeamSplitter))
    short BeamSplitter;
    __declspec(property(get=GetEmission1Low))
    short Emission1Low;
    __declspec(property(get=GetEmission1High))
    short Emission1High;
    __declspec(property(get=GetEmission2Low))
    short Emission2Low;
    __declspec(property(get=GetEmission2High))
    short Emission2High;

    //
    // Wrapper methods for error-handling
    //

    short GetBeamSplitter ( );
    short GetEmission1Low ( );
    short GetEmission1High ( );
    short GetEmission2Low ( );
    short GetEmission2High ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BeamSplitter (
        /*[out,retval]*/ short * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Emission1Low (
        /*[out,retval]*/ short * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Emission1High (
        /*[out,retval]*/ short * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Emission2Low (
        /*[out,retval]*/ short * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Emission2High (
        /*[out,retval]*/ short * pRetVal ) = 0;
};

struct __declspec(uuid("ece9877e-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBColorBeamSplitter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSuccessor1ID))
    _bstr_t Successor1ID;
    __declspec(property(get=GetSuccessor2ID))
    _bstr_t Successor2ID;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetSuccessor1ID ( );
    _bstr_t GetSuccessor2ID ( );
    short GetWavelengthAreaCount ( );
    IMTBColorBeamSplitterWavelengthAreaPtr GetWavelengthArea (
        short index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Successor1ID (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Successor2ID (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetWavelengthAreaCount (
        /*[out,retval]*/ short * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetWavelengthArea (
        /*[in]*/ short index,
        /*[out,retval]*/ struct IMTBColorBeamSplitterWavelengthArea * * pRetVal ) = 0;
};

struct __declspec(uuid("ece9878a-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBComponentID : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetComponentID))
    _bstr_t ComponentID;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetComponentID ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ComponentID (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("ece987c3-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBEmissionWavelengthArea : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEmissionLow))
    short EmissionLow;
    __declspec(property(get=GetEmissionHigh))
    short EmissionHigh;

    //
    // Wrapper methods for error-handling
    //

    short GetEmissionLow ( );
    short GetEmissionHigh ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EmissionLow (
        /*[out,retval]*/ short * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EmissionHigh (
        /*[out,retval]*/ short * pRetVal ) = 0;
};

struct __declspec(uuid("ece987c4-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBEmissionFilter : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    short GetWavelengthAreaCount ( );
    IMTBEmissionWavelengthAreaPtr GetWavelengthArea (
        short index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetWavelengthAreaCount (
        /*[out,retval]*/ short * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetWavelengthArea (
        /*[in]*/ short index,
        /*[out,retval]*/ struct IMTBEmissionWavelengthArea * * pRetVal ) = 0;
};

struct __declspec(uuid("ece987c5-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBDichroicBeamSplitterWavelength : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBeamSplitter))
    short BeamSplitter;

    //
    // Wrapper methods for error-handling
    //

    short GetBeamSplitter ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BeamSplitter (
        /*[out,retval]*/ short * pRetVal ) = 0;
};

struct __declspec(uuid("ece987c6-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBDichroicBeamSplitter : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    short GetWavelengthCount ( );
    IMTBDichroicBeamSplitterWavelengthPtr GetWavelength (
        short index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetWavelengthCount (
        /*[out,retval]*/ short * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetWavelength (
        /*[in]*/ short index,
        /*[out,retval]*/ struct IMTBDichroicBeamSplitterWavelength * * pRetVal ) = 0;
};

struct __declspec(uuid("ece987ca-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBAperture : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDiameter))
    double Diameter;

    //
    // Wrapper methods for error-handling
    //

    double GetDiameter ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Diameter (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("ece987cd-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBApoTomeGrid : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLinesPerMM))
    double LinesPerMM;

    //
    // Wrapper methods for error-handling
    //

    double GetLinesPerMM ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LinesPerMM (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("ece987cf-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBExcitationWavelengthArea : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetExcitationLow))
    short ExcitationLow;
    __declspec(property(get=GetExcitationHigh))
    short ExcitationHigh;

    //
    // Wrapper methods for error-handling
    //

    short GetExcitationLow ( );
    short GetExcitationHigh ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ExcitationLow (
        /*[out,retval]*/ short * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ExcitationHigh (
        /*[out,retval]*/ short * pRetVal ) = 0;
};

struct __declspec(uuid("ece987d0-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBExcitationFilter : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    short GetWavelengthAreaCount ( );
    IMTBExcitationWavelengthAreaPtr GetWavelengthArea (
        short index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetWavelengthAreaCount (
        /*[out,retval]*/ short * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetWavelengthArea (
        /*[in]*/ short index,
        /*[out,retval]*/ struct IMTBExcitationWavelengthArea * * pRetVal ) = 0;
};

struct __declspec(uuid("ece987c8-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBCSUSpinningDiskEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT MTBDiskRotationOnOffChangedEvent (
        enum MTBOnOff onOff );
};

struct __declspec(uuid("ece98771-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBCoupledZoomEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT MTBZoomCouplingChangedEvent (
        enum MTBOnOff onOff );
};

struct __declspec(uuid("ece98724-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBMove : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    double GetMinMoveSpeed (
        _bstr_t unit );
    double GetMaxMoveSpeed (
        _bstr_t unit );
    VARIANT_BOOL Move (
        double moveSpeed,
        _bstr_t unit );
    VARIANT_BOOL Move_2 (
        _bstr_t clientID,
        double moveSpeed,
        _bstr_t unit );
    VARIANT_BOOL Stop ( );
    VARIANT_BOOL Stop_2 (
        _bstr_t clientID );
    long GetSpeedUnitCount ( );
    _bstr_t GetSpeedUnit (
        long index );
    HRESULT add_MTBMoveSpeedSettledEvent (
        IUnknown * value );
    HRESULT remove_MTBMoveSpeedSettledEvent (
        IUnknown * value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetMinMoveSpeed (
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetMaxMoveSpeed (
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double moveSpeed,
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Move_2 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ double moveSpeed,
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Stop (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Stop_2 (
        /*[in]*/ BSTR clientID,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetSpeedUnitCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetSpeedUnit (
        /*[in]*/ long index,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_add_MTBMoveSpeedSettledEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBMoveSpeedSettledEvent (
        /*[in]*/ IUnknown * value ) = 0;
};

struct __declspec(uuid("ece9872b-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBServo : IDispatch
{};

struct __declspec(uuid("ece98773-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBZoom : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHasVignettingFreeLimit))
    VARIANT_BOOL HasVignettingFreeLimit;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetHasVignettingFreeLimit ( );
    double GetVignettingFreeLimit (
        _bstr_t unit );
    HRESULT add_MTBVignettingFreeLimitChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBVignettingFreeLimitChangedEvent (
        IUnknown * value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_HasVignettingFreeLimit (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetVignettingFreeLimit (
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_add_MTBVignettingFreeLimitChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBVignettingFreeLimitChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
};

struct __declspec(uuid("ece98784-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBZoomEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT MTBVignettingFreeLimitChangedEvent (
        struct _Hashtable * limits );
};

struct __declspec(uuid("ece98774-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBCoupledZoomZoom : IDispatch
{};

struct __declspec(uuid("ece98729-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBLampEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT MTB3200KChangedEvent (
        enum MTBOnOff onOff );
    HRESULT MTBOnOffChangedEvent (
        enum MTBOnOff onOff );
    HRESULT MTBRemoteChangedEvent (
        enum MTBOnOff onOff );
    HRESULT MTBActiveChangedEvent (
        VARIANT_BOOL active );
};

struct __declspec(uuid("ece98778-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBTLHalogenLamp : IDispatch
{};

struct __declspec(uuid("ece98779-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBRLHalogenLamp : IDispatch
{};

struct __declspec(uuid("ece98776-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBFluorescenceLampEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT MTBLevelChangedEvent (
        long level );
    HRESULT MTBPositionChangedEvent (
        struct _Hashtable * positions,
        long level );
    HRESULT MTBWarmingUpChangedEvent (
        VARIANT_BOOL IsWarmingUp );
};

struct __declspec(uuid("ece987ae-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBFluorescenceLED : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWavelength))
    short Wavelength;

    //
    // Wrapper methods for error-handling
    //

    short GetWavelength ( );
    unsigned long GetPulseDuration ( );
    VARIANT_BOOL SetPulseDuration (
        unsigned long duration );
    VARIANT_BOOL SetPulseDuration_2 (
        _bstr_t clientID,
        unsigned long duration );
    VARIANT_BOOL SetTriggerChannel (
        unsigned char triggerChannelNumber );
    unsigned char GetTriggerChannel ( );
    HRESULT GetExcitationFilter (
        BSTR * Name,
        short * wavelengthLow,
        short * wavelengthHigh );
    HRESULT add_MTBPulseDurationChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBPulseDurationChangedEvent (
        IUnknown * value );
    HRESULT add_MTBTriggerChannelChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBTriggerChannelChangedEvent (
        IUnknown * value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ short * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetPulseDuration (
        /*[out,retval]*/ unsigned long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetPulseDuration (
        /*[in]*/ unsigned long duration,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetPulseDuration_2 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ unsigned long duration,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetTriggerChannel (
        /*[in]*/ unsigned char triggerChannelNumber,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetTriggerChannel (
        /*[out,retval]*/ unsigned char * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetExcitationFilter (
        /*[out]*/ BSTR * Name,
        /*[out]*/ short * wavelengthLow,
        /*[out]*/ short * wavelengthHigh ) = 0;
      virtual HRESULT __stdcall raw_add_MTBPulseDurationChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBPulseDurationChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBTriggerChannelChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBTriggerChannelChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
};

struct __declspec(uuid("ece987b0-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBFluorescenceLEDEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT MTBPulseDurationChangedEvent (
        unsigned long duration );
    HRESULT MTBTriggerChannelChangedEvent (
        unsigned char triggerChannelNumber );
};

struct __declspec(uuid("ece987a2-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBFluorescenceLEDControlEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT MTBOperationModeChangedEvent (
        enum MTBFluorescenceLEDOperationMode operationMode,
        enum MTBFluorescenceLEDTriggerMode triggerMode );
    HRESULT MTBTriggerBufferEntryChangedEvent (
        unsigned char entryNumber,
        struct _Hashtable * brightness,
        SAFEARRAY * duration );
    HRESULT MTBInvertTriggerSignalChangedEvent (
        SAFEARRAY * triggerIn,
        SAFEARRAY * triggerOut );
};

struct __declspec(uuid("ece9870a-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBConfiguration : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    _bstr_t ReadActiveConfiguration ( );
    _bstr_t ReadConfiguration ( );
    HRESULT WriteConfiguration (
        _bstr_t configuration );
    _bstr_t ReadComponents ( );
    _bstr_t ReadUserComponents ( );
    HRESULT WriteUserComponents (
        _bstr_t components );
    HRESULT ConfigChanged ( );
    _variant_t GetCanServer (
        _bstr_t clientID,
        BSTR * instanceID );
    HRESULT ReleaseCanServer (
        _bstr_t clientID,
        _bstr_t instanceID );
    HRESULT add_ConfigChangedEvent (
        IUnknown * value );
    HRESULT remove_ConfigChangedEvent (
        IUnknown * value );
    _variant_t GetCanServerMonitor (
        _bstr_t clientID,
        BSTR * instanceID );
    HRESULT ReleaseCanServerMonitor (
        _bstr_t clientID,
        _bstr_t instanceID );
    HRESULT add_MonitorASCIIEvent (
        IUnknown * value );
    HRESULT remove_MonitorASCIIEvent (
        IUnknown * value );
    HRESULT add_MonitorMessageEvent (
        IUnknown * value );
    HRESULT remove_MonitorMessageEvent (
        IUnknown * value );
    HRESULT add_MonitorPIDEvent (
        IUnknown * value );
    HRESULT remove_MonitorPIDEvent (
        IUnknown * value );
    HRESULT add_MonitorRawDataEvent (
        IUnknown * value );
    HRESULT remove_MonitorRawDataEvent (
        IUnknown * value );
    HRESULT add_CanSrvReceivedCharEvent (
        IUnknown * value );
    HRESULT remove_CanSrvReceivedCharEvent (
        IUnknown * value );
    HRESULT add_CanSrvReceivedEvent (
        IUnknown * value );
    HRESULT remove_CanSrvReceivedEvent (
        IUnknown * value );
    HRESULT add_CanSrvReceivedSyncEvent (
        IUnknown * value );
    HRESULT remove_CanSrvReceivedSyncEvent (
        IUnknown * value );
    HRESULT add_CanSrvReceivedCANMessageEvent (
        IUnknown * value );
    HRESULT remove_CanSrvReceivedCANMessageEvent (
        IUnknown * value );
    HRESULT add_CanSrvReceivedCANMessageSyncEvent (
        IUnknown * value );
    HRESULT remove_CanSrvReceivedCANMessageSyncEvent (
        IUnknown * value );
    HRESULT add_CanSrvErrorNumberEvent (
        IUnknown * value );
    HRESULT remove_CanSrvErrorNumberEvent (
        IUnknown * value );
    HRESULT add_CanSrvErrorDescriptionEvent (
        IUnknown * value );
    HRESULT remove_CanSrvErrorDescriptionEvent (
        IUnknown * value );
    HRESULT add_CanSrvErrorEvent (
        IUnknown * value );
    HRESULT remove_CanSrvErrorEvent (
        IUnknown * value );
    _bstr_t ReadComponentsFile (
        _bstr_t filename );
    HRESULT WriteComponentsFile (
        _bstr_t contents,
        _bstr_t filename );
    long GetComponentsFileVersion (
        _bstr_t filename );
    SAFEARRAY * GetAlternativeUSBProductIDs (
        long originalProductID );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ReadActiveConfiguration (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ReadConfiguration (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_WriteConfiguration (
        /*[in]*/ BSTR configuration ) = 0;
      virtual HRESULT __stdcall raw_ReadComponents (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ReadUserComponents (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_WriteUserComponents (
        /*[in]*/ BSTR components ) = 0;
      virtual HRESULT __stdcall raw_ConfigChanged ( ) = 0;
      virtual HRESULT __stdcall raw_GetCanServer (
        /*[in]*/ BSTR clientID,
        /*[out]*/ BSTR * instanceID,
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ReleaseCanServer (
        /*[in]*/ BSTR clientID,
        /*[in]*/ BSTR instanceID ) = 0;
      virtual HRESULT __stdcall raw_add_ConfigChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_ConfigChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_GetCanServerMonitor (
        /*[in]*/ BSTR clientID,
        /*[out]*/ BSTR * instanceID,
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ReleaseCanServerMonitor (
        /*[in]*/ BSTR clientID,
        /*[in]*/ BSTR instanceID ) = 0;
      virtual HRESULT __stdcall raw_add_MonitorASCIIEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MonitorASCIIEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MonitorMessageEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MonitorMessageEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MonitorPIDEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MonitorPIDEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MonitorRawDataEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MonitorRawDataEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_CanSrvReceivedCharEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_CanSrvReceivedCharEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_CanSrvReceivedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_CanSrvReceivedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_CanSrvReceivedSyncEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_CanSrvReceivedSyncEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_CanSrvReceivedCANMessageEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_CanSrvReceivedCANMessageEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_CanSrvReceivedCANMessageSyncEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_CanSrvReceivedCANMessageSyncEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_CanSrvErrorNumberEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_CanSrvErrorNumberEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_CanSrvErrorDescriptionEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_CanSrvErrorDescriptionEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_CanSrvErrorEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_CanSrvErrorEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_ReadComponentsFile (
        /*[in]*/ BSTR filename,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_WriteComponentsFile (
        /*[in]*/ BSTR contents,
        /*[in]*/ BSTR filename ) = 0;
      virtual HRESULT __stdcall raw_GetComponentsFileVersion (
        /*[in]*/ BSTR filename,
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAlternativeUSBProductIDs (
        /*[in]*/ long originalProductID,
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
};

struct __declspec(uuid("ece987a9-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBConfigurationEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT ConfigChangedEvent ( );
    HRESULT MonitorASCIIEvent (
        const _variant_t & MonMode,
        short PortNbr,
        const _variant_t & ErrorStateNbr,
        _bstr_t stText );
    HRESULT MonitorMessageEvent (
        const _variant_t & MonMode,
        short PortNbr,
        _bstr_t stTime,
        const _variant_t & MsgType,
        short DestAddr,
        short SourceAddr,
        short CmdClass,
        short CmdNbr,
        short CmdSubNbr,
        short sPID,
        const _variant_t & vData );
    HRESULT MonitorPIDEvent (
        short PIDNumber );
    HRESULT MonitorRawDataEvent (
        const _variant_t & MonMode,
        short PortNbr,
        _bstr_t stTime,
        const _variant_t & vData );
    HRESULT CanSrvReceivedCharEvent (
        short c );
    HRESULT CanSrvReceivedEvent (
        const _variant_t & vData );
    HRESULT CanSrvReceivedSyncEvent (
        const _variant_t & vData,
        short PID );
    HRESULT CanSrvReceivedCANMessageEvent (
        const _variant_t & MsgType,
        short DestAddr,
        short SourceAddr,
        short CmdClass,
        short CmdNbr,
        short CmdSubNbr,
        short PID,
        const _variant_t & vData );
    HRESULT CanSrvReceivedCANMessageSyncEvent (
        const _variant_t & MsgType,
        short DestAddr,
        short SourceAddr,
        short CmdClass,
        short CmdNbr,
        short CmdSubNbr,
        short PID,
        const _variant_t & vData );
    HRESULT CanSrvErrorNumberEvent (
        const _variant_t & ErrorNbr,
        short PID );
    HRESULT CanSrvErrorDescriptionEvent (
        short PID,
        _bstr_t sError );
    HRESULT CanSrvErrorEvent (
        const _variant_t & ErrorNbr,
        short PID,
        _bstr_t sError );
};

struct __declspec(uuid("ece9870b-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBFwSettings : IDispatch
{};

struct __declspec(uuid("ece987a4-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBBeamCombiner : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWavelength))
    short Wavelength;

    //
    // Wrapper methods for error-handling
    //

    short GetWavelength ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ short * pRetVal ) = 0;
};

struct __declspec(uuid("ece987e5-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBMDSControllerEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT MTBControlModeChangedEvent (
        enum MTBAOTFControlMode controlMode );
};

struct __declspec(uuid("ece987d3-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBMultiChannelAOTFEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT MTBControlModeChangedEvent (
        enum MTBAOTFControlMode controlMode );
};

struct __declspec(uuid("ece987d4-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBLaserLine : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWavelength))
    short Wavelength;
    __declspec(property(get=GetCanSwitchOn))
    VARIANT_BOOL CanSwitchOn;
    __declspec(property(get=GetOutputChannel))
    long OutputChannel;

    //
    // Wrapper methods for error-handling
    //

    short GetWavelength ( );
    VARIANT_BOOL GetCanSwitchOn ( );
    HRESULT add_MTBCanSwitchOnChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBCanSwitchOnChangedEvent (
        IUnknown * value );
    long GetOutputChannel ( );
    HRESULT add_MTBOutputChannelChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBOutputChannelChangedEvent (
        IUnknown * value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Wavelength (
        /*[out,retval]*/ short * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CanSwitchOn (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_add_MTBCanSwitchOnChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBCanSwitchOnChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall get_OutputChannel (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_add_MTBOutputChannelChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBOutputChannelChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
};

struct __declspec(uuid("ece987d5-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBLaserLineEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT MTBCanSwitchOnChangedEvent (
        VARIANT_BOOL CanSwitchOn );
    HRESULT MTBOutputChannelChangedEvent (
        long OutputChannel );
};

struct __declspec(uuid("ece98713-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBDescriptors : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetApplicationName ( );
    _bstr_t GetApplicationVersion ( );
    _bstr_t GetApplicationDate ( );
    _bstr_t GetBIOSName ( );
    _bstr_t GetBIOSVersion ( );
    _bstr_t GetBIOSDate ( );
    _bstr_t GetCPUType (
        VARIANT_BOOL subBus );
    _bstr_t GetSerialNumber ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetApplicationName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetApplicationVersion (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetApplicationDate (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetBIOSName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetBIOSVersion (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetBIOSDate (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetCPUType (
        /*[in]*/ VARIANT_BOOL subBus,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetSerialNumber (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("ece987bf-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBAxisTriggerEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT MTBAxisTriggerModeChangedEvent (
        enum MTBAxisTriggerMode triggerMode );
};

struct __declspec(uuid("ece98756-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBMicroscopeManagerEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT MTBParfocalCorrectionChangedEvent (
        enum MTBOnOff onOff );
    HRESULT MTBLightManagerModeChangedEvent (
        enum MTBLightManagerModes mode );
    HRESULT MTBLightManagerTemporaryOnOffChangedEvent (
        enum MTBOnOff onOff );
    HRESULT MTBDazzleProtectionOnOffChangedEvent (
        enum MTBOnOff onOff );
    HRESULT MTBContrastManagerContrastMethodsChangedEvent (
        enum MTBContrastManagerContrastMethods methods );
    HRESULT MTBContrastManagerContrastMethodChangedEvent (
        enum MTBContrastManagerContrastMethods method );
    HRESULT MTBContrastManagerModeChangedEvent (
        enum MTBContrastManagerModes mode );
    HRESULT MTBCondenserFocusingOnOffChangedEvent (
        enum MTBOnOff onOff );
    HRESULT MTBCurrentFeedOnOffChangedEvent (
        enum MTBOnOff onOff );
    HRESULT MTBLoadWorkCouplingOnOffChangedEvent (
        enum MTBOnOff onOff );
    HRESULT MTBVignettingFreeModeTemporaryOnOffChangedEvent (
        enum MTBOnOff onOff );
    HRESULT MTBLaserSafetyChangedEvent (
        enum MTBLaserSafety safety );
};

struct __declspec(uuid("ece9878c-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBIncubationSensor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSensorIsAvailable))
    VARIANT_BOOL SensorIsAvailable;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetSensorIsAvailable ( );
    HRESULT add_MTBSensorAvailableChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBSensorAvailableChangedEvent (
        IUnknown * value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SensorIsAvailable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_add_MTBSensorAvailableChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBSensorAvailableChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
};

struct __declspec(uuid("ece98793-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBIncubationSensorEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT MTBSensorAvailableChangedEvent (
        VARIANT_BOOL available );
};

struct __declspec(uuid("ece98794-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBIncubationChannelEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT MTBOnOffChangedEvent (
        enum MTBOnOff onOff );
    HRESULT MTBNameChangedEvent (
        _bstr_t Name );
};

struct __declspec(uuid("ece9878e-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBIncubationCalibrationSensor : IDispatch
{};

struct __declspec(uuid("ece9878f-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBIncubationHumiditySensor : IDispatch
{};

struct __declspec(uuid("ece98790-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBIncubationTemperatureChannel : IDispatch
{};

struct __declspec(uuid("ece98795-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBIncubationCO2ChannelEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT MTBSaturationChangedEvent (
        enum MTBSaturationType saturationType );
};

struct __declspec(uuid("ece98796-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBIncubationAirHeaterChannel : IDispatch
{};

struct __declspec(uuid("ece98797-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBIncubationO2Channel : IDispatch
{};

struct __declspec(uuid("ece987ab-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBIncubationCirculatorChannel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStatus))
    _bstr_t Status;
    __declspec(property(get=GetError))
    _bstr_t Error;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetStatus ( );
    _bstr_t GetError ( );
    HRESULT add_MTBStatusChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBStatusChangedEvent (
        IUnknown * value );
    HRESULT add_MTBErrorChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBErrorChangedEvent (
        IUnknown * value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Status (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Error (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_add_MTBStatusChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBStatusChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBErrorChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBErrorChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
};

struct __declspec(uuid("ece987ac-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBIncubationCirculatorChannelEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT MTBStatusChangedEvent (
        _bstr_t Status );
    HRESULT MTBErrorChangedEvent (
        _bstr_t Error );
};

struct __declspec(uuid("ece98722-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBContinualEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT MTBPositionChangedEvent (
        struct _Hashtable * positions );
    HRESULT MTBTargetPositionChangedEvent (
        struct _Hashtable * targetPositions );
    HRESULT MTBPositionSettledEvent (
        struct _Hashtable * positions );
    HRESULT MTBHWLimitReachedEvent (
        VARIANT_BOOL state,
        enum MTBLimits limit );
};

struct __declspec(uuid("ece987b3-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBFocusStabilizerEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT MTBPeriodicallyOnOffChangedEvent (
        enum MTBOnOff onOff,
        enum MTBFocusStabilizerPeriodicallyOnOffChangedReason reason );
    HRESULT MTBPeriodChangedEvent (
        unsigned long period );
    HRESULT MTBDataChangedEvent (
        SAFEARRAY * data,
        enum MTBFocusStabilizerDataType type );
    HRESULT MTBExclusiveModeChangedEvent (
        enum MTBOnOff onOff );
    HRESULT MTBDeviationChangedEvent (
        struct _Hashtable * deviations );
};

struct __declspec(uuid("ece98783-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBUtil : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetNameFromUniqueName (
        _bstr_t UniqueName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetNameFromUniqueName (
        /*[in]*/ BSTR UniqueName,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("ece98786-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBKeyFunctions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKeyCount))
    long KeyCount;
    __declspec(property(get=GetHasKeyLabeling))
    VARIANT_BOOL HasKeyLabeling;

    //
    // Wrapper methods for error-handling
    //

    long GetKeyCount ( );
    VARIANT_BOOL GetHasKeyLabeling ( );
    HRESULT SetKeyLabel (
        long keyIndex,
        _bstr_t label );
    _bstr_t GetKeyLabel (
        long keyIndex );
    HRESULT add_MTBKeyFunctionsExecuteEvent (
        IUnknown * value );
    HRESULT remove_MTBKeyFunctionsExecuteEvent (
        IUnknown * value );
    HRESULT add_MTBKeyFunctionsLabelChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBKeyFunctionsLabelChangedEvent (
        IUnknown * value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_KeyCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HasKeyLabeling (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetKeyLabel (
        /*[in]*/ long keyIndex,
        /*[in]*/ BSTR label ) = 0;
      virtual HRESULT __stdcall raw_GetKeyLabel (
        /*[in]*/ long keyIndex,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_add_MTBKeyFunctionsExecuteEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBKeyFunctionsExecuteEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBKeyFunctionsLabelChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBKeyFunctionsLabelChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
};

struct __declspec(uuid("ece98787-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBKeyFunctionsEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT MTBKeyFunctionsExecuteEvent (
        long keyIndex );
    HRESULT MTBKeyFunctionsLabelChangedEvent (
        long keyIndex,
        _bstr_t label );
};

struct __declspec(uuid("ece9870d-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBRootEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT MTBConfigChanged (
        SAFEARRAY * componentIDs );
};

struct __declspec(uuid("ece98753-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBObject : IDispatch
{};

struct __declspec(uuid("ece9874e-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBPort : IDispatch
{};

struct __declspec(uuid("ece9877a-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBMagnificationPort : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMagnification))
    double Magnification;
    __declspec(property(get=GetTotalMagnification))
    double TotalMagnification;

    //
    // Wrapper methods for error-handling
    //

    double GetMagnification ( );
    double GetTotalMagnification ( );
    HRESULT add_MTBTotalMagnificationChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBTotalMagnificationChangedEvent (
        IUnknown * value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Magnification (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TotalMagnification (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_add_MTBTotalMagnificationChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBTotalMagnificationChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
};

struct __declspec(uuid("ece9874f-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBMagnificationPortEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT MTBTotalMagnificationChangedEvent (
        double Magnification );
};

struct __declspec(uuid("ece987e2-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBCameraAdapter : IDispatch
{};

struct __declspec(uuid("ece9874c-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBEyepiece : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFieldOfView))
    double FieldOfView;
    __declspec(property(get=GetTotalFieldOfView))
    double TotalFieldOfView;
    __declspec(property(get=GetDepthOfField))
    double DepthOfField;
    __declspec(property(get=GetResolution))
    double Resolution;

    //
    // Wrapper methods for error-handling
    //

    double GetFieldOfView ( );
    double GetTotalFieldOfView ( );
    double GetDepthOfField ( );
    HRESULT add_MTBTotalFieldOfViewChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBTotalFieldOfViewChangedEvent (
        IUnknown * value );
    HRESULT add_MTBDepthOfFieldChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBDepthOfFieldChangedEvent (
        IUnknown * value );
    double GetResolution ( );
    HRESULT add_MTBResolutionChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBResolutionChangedEvent (
        IUnknown * value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FieldOfView (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TotalFieldOfView (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DepthOfField (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_add_MTBTotalFieldOfViewChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBTotalFieldOfViewChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBDepthOfFieldChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBDepthOfFieldChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall get_Resolution (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_add_MTBResolutionChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBResolutionChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
};

struct __declspec(uuid("ece98750-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBEyepieceEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT MTBTotalFieldOfViewChangedEvent (
        double FieldOfView );
    HRESULT MTBDepthOfFieldChangedEvent (
        double DepthOfField );
    HRESULT MTBResolutionChangedEvent (
        double Resolution );
};

struct __declspec(uuid("ece9877b-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBDigiport : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFocalLength))
    double FocalLength;

    //
    // Wrapper methods for error-handling
    //

    double GetFocalLength ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FocalLength (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("ece987ce-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBDoubleCameraAdapter : IDispatch
{};

struct __declspec(uuid("ece98737-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBMoveEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT MTBMoveSpeedSettledEvent ( );
};

enum __declspec(uuid("ece987a8-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBExceptionCode
{
    MTBExceptionCode_ErrMTBGeneral = -2147217408,
    MTBExceptionCode_ErrCan = -2147217407,
    MTBExceptionCode_ErrClientNotExists = -2147217406,
    MTBExceptionCode_ErrConfigFile = -2147217405,
    MTBExceptionCode_ErrInitMTB = -2147217404,
    MTBExceptionCode_ErrConfigFileLoad = -2147217403,
    MTBExceptionCode_ErrWrongIndex = -2147217402,
    MTBExceptionCode_ErrWrongLockingID = -2147217401,
    MTBExceptionCode_ErrLocked = -2147217400,
    MTBExceptionCode_ErrAlreadyLocked = -2147217399,
    MTBExceptionCode_ErrClientNotAvailable = -2147217398,
    MTBExceptionCode_ErrMonitoringFinish = -2147217397,
    MTBExceptionCode_ErrConfigFileSave = -2147217396,
    MTBExceptionCode_ErrXMLNodeNotFound = -2147217395,
    MTBExceptionCode_ErrDefaultScale = -2147217394,
    MTBExceptionCode_ErrPositionSet = -2147217393,
    MTBExceptionCode_ErrCanConnection = -2147217392,
    MTBExceptionCode_ErrCanCommunication = -2147217391,
    MTBExceptionCode_ErrConfigFileValidate = -2147217390,
    MTBExceptionCode_ErrUnitNotAvailable = -2147217389,
    MTBExceptionCode_ErrNoActiveConfiguration = -2147217388,
    MTBExceptionCode_ErrConfigInvalid = -2147217387,
    MTBExceptionCode_ErrNotImplemented = -2147217386,
    MTBExceptionCode_ErrCommand = -2147217385,
    MTBExceptionCode_ErrLMModeNotAvailable = -2147217384,
    MTBExceptionCode_ErrCMModeNotAvailable = -2147217383,
    MTBExceptionCode_ErrFocusNotAvailable = -2147217382,
    MTBExceptionCode_ErrApoTomeListToLong = -2147217381,
    MTBExceptionCode_ErrApoTomeListRange = -2147217380,
    MTBExceptionCode_ErrApoTomePointerInvalid = -2147217379,
    MTBExceptionCode_ErrApoTomeWobbleParameter = -2147217378,
    MTBExceptionCode_ErrApoTomeHWTriggerChannel = -2147217377,
    MTBExceptionCode_ErrInitFromHW = -2147217376,
    MTBExceptionCode_ErrDescriptor = -2147217375,
    MTBExceptionCode_ErrWSControl = -2147217374,
    MTBExceptionCode_ErrElementChange = -2147217373,
    MTBExceptionCode_ErrNotActive = -2147217372,
    MTBExceptionCode_ErrCalibrationFailed = -2147217371,
    MTBExceptionCode_ErrInitFLLED = -2147217370,
    MTBExceptionCode_ErrWrongTriggerBufferEntry = -2147217369,
    MTBExceptionCode_ErrOldActiveConfiguration = -2147217368,
    MTBExceptionCode_ErrCreateBackup = -2147217367,
    MTBExceptionCode_ErrCan29 = -2147217366,
    MTBExceptionCode_ErrPositioningCommandAborted = -2147217365,
    MTBExceptionCode_ErrCommandNotAllowed = -2147217364,
    MTBExceptionCode_ErrFocusStabilizer = -2147217363,
    MTBExceptionCode_ErrFocusStabilizerPositionInit = -2147217362,
    MTBExceptionCode_ErrFocusStabilizerFocusLocked = -2147217361,
    MTBExceptionCode_ErrFocusStabilizerFocusLockingFailed = -2147217360,
    MTBExceptionCode_ErrFocusStabilizerFocusOnLimit = -2147217359,
    MTBExceptionCode_ErrFocusStabilizerCamera = -2147217358,
    MTBExceptionCode_ErrFocusStabilizerMaximum = -2147217357,
    MTBExceptionCode_ErrNoLED = -2147217356,
    MTBExceptionCode_ErrPositionNotReached = -2147217355,
    MTBExceptionCode_ErrNotControllable = -2147217354
};

struct __declspec(uuid("ece98719-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBException;
    // interface _Object
    // [ default ] interface ISerializable
    // interface _Exception

enum __declspec(uuid("ece98768-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBLightPathLocations
{
    MTBLightPathLocations_ReflectedLight = 1,
    MTBLightPathLocations_TransmittedLight = 2,
    MTBLightPathLocations_Observation = 4,
    MTBLightPathLocations_Left = 8,
    MTBLightPathLocations_Right = 16
};

struct __declspec(uuid("ece98767-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBRLTLSwitchState : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getstate))
    enum MTBLightPathLocations state;

    //
    // Wrapper methods for error-handling
    //

    enum MTBLightPathLocations Getstate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_state (
        /*[out,retval]*/ enum MTBLightPathLocations * pRetVal ) = 0;
};

enum __declspec(uuid("ece98765-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBApoTomeHWTriggerCondition
{
    MTBApoTomeHWTriggerCondition_RisingEdge = 0,
    MTBApoTomeHWTriggerCondition_FallingEdge = 1
};

enum __declspec(uuid("ece9875b-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBContrastManagerContrastMethods
{
    MTBContrastManagerContrastMethods_Unknown = 1,
    MTBContrastManagerContrastMethods_TransmittedLightBrightfield = 2,
    MTBContrastManagerContrastMethods_TransmittedLightPhase = 4,
    MTBContrastManagerContrastMethods_TransmittedLightDarkfield = 8,
    MTBContrastManagerContrastMethods_TransmittedLightDIC = 16,
    MTBContrastManagerContrastMethods_TransmittedLightFluorescence = 32,
    MTBContrastManagerContrastMethods_TransmittedLightPol = 64,
    MTBContrastManagerContrastMethods_TransmittedLight = 126,
    MTBContrastManagerContrastMethods_ReflectedLightBrightfield = 512,
    MTBContrastManagerContrastMethods_ReflectedLightDarkfield = 2048,
    MTBContrastManagerContrastMethods_ReflectedLightDIC = 4096,
    MTBContrastManagerContrastMethods_ReflectedLightFluorescence = 8192,
    MTBContrastManagerContrastMethods_ReflectedLightPol = 16384,
    MTBContrastManagerContrastMethods_ReflectedLight = 31232
};

enum __declspec(uuid("ece9877d-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBContrastManagerModes
{
    MTBContrastManagerModes_Unknown = 1,
    MTBContrastManagerModes_Off = 2,
    MTBContrastManagerModes_OnDemand = 4,
    MTBContrastManagerModes_ContrastRetaining = 8
};

enum __declspec(uuid("ece9875a-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBLightManagerModes
{
    MTBLightManagerModes_Off = 1,
    MTBLightManagerModes_Objective = 2,
    MTBLightManagerModes_SmartContrast = 4,
    MTBLightManagerModes_EpiMode = 8,
    MTBLightManagerModes_ObjectiveConstantColorTemperature = 16,
    MTBLightManagerModes_REOReflectedLight = 32,
    MTBLightManagerModes_REOTransmittedLight = 64,
    MTBLightManagerModes_REOCombined = 96,
    MTBLightManagerModes_Classic = 128
};

enum __declspec(uuid("ece98759-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBApoTomeOperationState
{
    MTBApoTomeOperationState_FieldStop = 0,
    MTBApoTomeOperationState_ApoTome = 1,
    MTBApoTomeOperationState_Undefined = 2,
    MTBApoTomeOperationState_Outside = 3,
    MTBApoTomeOperationState_ApoTomeReady = 17
};

enum __declspec(uuid("ece98754-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBOnOff
{
    MTBOnOff_Off = 0,
    MTBOnOff_On = 1
};

struct __declspec(uuid("ece987c1-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBOnOffSwitchState : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getstate))
    enum MTBOnOff state;

    //
    // Wrapper methods for error-handling
    //

    enum MTBOnOff Getstate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_state (
        /*[out,retval]*/ enum MTBOnOff * pRetVal ) = 0;
};

enum __declspec(uuid("ece98730-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBLoadWorkPosition
{
    MTBLoadWorkPosition_Intermediate = 0,
    MTBLoadWorkPosition_Load = 1,
    MTBLoadWorkPosition_Work = 2
};

enum __declspec(uuid("ece98732-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBCalibrationModes
{
    MTBCalibrationModes_NotCalibrated = 0,
    MTBCalibrationModes_OnLowerLimit = 1,
    MTBCalibrationModes_OnUpperLimit = 2,
    MTBCalibrationModes_OnCurrentPosition = 4
};

enum __declspec(uuid("ece98733-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBDirection
{
    MTBDirection_Positive = 0,
    MTBDirection_Negative = 1
};

enum __declspec(uuid("ece9872c-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBObjectiveImmersionTypes
{
    MTBObjectiveImmersionTypes_Air = 1,
    MTBObjectiveImmersionTypes_Water = 2,
    MTBObjectiveImmersionTypes_Oil = 4,
    MTBObjectiveImmersionTypes_Glycerine = 8
};

enum __declspec(uuid("ece9872d-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBContrastTypes
{
    MTBContrastTypes_Unknown = 0,
    MTBContrastTypes_PH0 = 1,
    MTBContrastTypes_PH1 = 2,
    MTBContrastTypes_PH2 = 4,
    MTBContrastTypes_PH3 = 8,
    MTBContrastTypes_DIC1 = 16,
    MTBContrastTypes_DIC2 = 32,
    MTBContrastTypes_DIC3 = 64,
    MTBContrastTypes_VAR1 = 128,
    MTBContrastTypes_VAR2 = 256,
    MTBContrastTypes_BrightField = 1024,
    MTBContrastTypes_DarkField = 2048,
    MTBContrastTypes_DIC0 = 4096,
    MTBContrastTypes_PlasDIC35 = 8192,
    MTBContrastTypes_PlasDIC5 = 16384,
    MTBContrastTypes_RLBrightField = 65536,
    MTBContrastTypes_RLDarkField = 131072,
    MTBContrastTypes_RLDIC = 262144,
    MTBContrastTypes_RLCDIC = 524288,
    MTBContrastTypes_RLCDIC1 = 1048576,
    MTBContrastTypes_RLCDIC2 = 2097152,
    MTBContrastTypes_RLTIC = 4194304,
    MTBContrastTypes_RLPol = 16777216,
    MTBContrastTypes_TLPol = 33554432,
    MTBContrastTypes_NoContrast = 67108864,
    MTBContrastTypes_BrightFieldPlus = 134217728,
    MTBContrastTypes_Relief = 268435456
};

struct __declspec(uuid("ece98740-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBContrast : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetContrastMethod))
    enum MTBContrastTypes ContrastMethod;

    //
    // Wrapper methods for error-handling
    //

    enum MTBContrastTypes GetContrastMethod ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ContrastMethod (
        /*[out,retval]*/ enum MTBContrastTypes * pRetVal ) = 0;
};

enum __declspec(uuid("ece9872e-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBObjectiveFeatures
{
    MTBObjectiveFeatures_Nothing = 0,
    MTBObjectiveFeatures_Korr = 1,
    MTBObjectiveFeatures_Iris = 2,
    MTBObjectiveFeatures_Pol = 4,
    MTBObjectiveFeatures_LD = 8,
    MTBObjectiveFeatures_IR = 16,
    MTBObjectiveFeatures_UV = 32,
    MTBObjectiveFeatures_HD = 64,
    MTBObjectiveFeatures_Stereo = 128,
    MTBObjectiveFeatures_Converter = 256,
    MTBObjectiveFeatures_TIRF = 512,
    MTBObjectiveFeatures_TIRFAdjust = 1024
};

struct __declspec(uuid("ece987e3-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBObjective : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMagnification))
    double Magnification;
    __declspec(property(get=GetAperture))
    double Aperture;
    __declspec(property(get=GetImmersionType))
    enum MTBObjectiveImmersionTypes ImmersionType;
    __declspec(property(get=GetContrastMethod))
    enum MTBContrastTypes ContrastMethod;
    __declspec(property(get=GetWorkingDistance))
    double WorkingDistance;
    __declspec(property(get=GetFeatures))
    enum MTBObjectiveFeatures Features;
    __declspec(property(get=GetTIRFAngleCorrection))
    double TIRFAngleCorrection;

    //
    // Wrapper methods for error-handling
    //

    double GetMagnification ( );
    double GetAperture ( );
    enum MTBObjectiveImmersionTypes GetImmersionType ( );
    enum MTBContrastTypes GetContrastMethod ( );
    double GetWorkingDistance ( );
    enum MTBObjectiveFeatures GetFeatures ( );
    double GetTIRFAngleCorrection ( );
    HRESULT GetInformations (
        double * Magnification,
        double * Aperture,
        enum MTBObjectiveImmersionTypes * ImmersionType,
        enum MTBContrastTypes * ContrastMethod,
        double * WorkingDistance,
        enum MTBObjectiveFeatures * Features,
        double * TIRFAngleCorrection );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Magnification (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Aperture (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ImmersionType (
        /*[out,retval]*/ enum MTBObjectiveImmersionTypes * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ContrastMethod (
        /*[out,retval]*/ enum MTBContrastTypes * pRetVal ) = 0;
      virtual HRESULT __stdcall get_WorkingDistance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Features (
        /*[out,retval]*/ enum MTBObjectiveFeatures * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TIRFAngleCorrection (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetInformations (
        /*[out]*/ double * Magnification,
        /*[out]*/ double * Aperture,
        /*[out]*/ enum MTBObjectiveImmersionTypes * ImmersionType,
        /*[out]*/ enum MTBContrastTypes * ContrastMethod,
        /*[out]*/ double * WorkingDistance,
        /*[out]*/ enum MTBObjectiveFeatures * Features,
        /*[out]*/ double * TIRFAngleCorrection ) = 0;
};

enum __declspec(uuid("ece98720-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBLimits
{
    MTBLimits_None = 0,
    MTBLimits_Upper = 1,
    MTBLimits_Lower = 2
};

enum __declspec(uuid("ece98718-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBCmdSetModes
{
    MTBCmdSetModes_Default = 0,
    MTBCmdSetModes_Synchronous = 1,
    MTBCmdSetModes_Relative = 2,
    MTBCmdSetModes_UnidirectionalBacklash = 4,
    MTBCmdSetModes_BidirectionalBacklashSmart = 8,
    MTBCmdSetModes_BidirectionalBacklash = 16,
    MTBCmdSetModes_Smooth = 32,
    MTBCmdSetModes_VariableProfile = 64,
    MTBCmdSetModes_Fast = 128
};

struct __declspec(uuid("ece98703-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBChanger : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPosition))
    short Position;
    __declspec(property(get=GetMinPosition))
    short MinPosition;
    __declspec(property(get=GetMaxPosition))
    short MaxPosition;

    //
    // Wrapper methods for error-handling
    //

    short GetPosition ( );
    short GetMinPosition ( );
    short GetMaxPosition ( );
    long GetElementCount ( );
    IMTBChangerElementPtr GetElement (
        long n );
    VARIANT_BOOL SetPosition (
        short Position,
        enum MTBCmdSetModes mode,
        long timeout );
    VARIANT_BOOL SetPosition_2 (
        short Position,
        enum MTBCmdSetModes mode );
    VARIANT_BOOL SetPosition_3 (
        _bstr_t clientID,
        short Position,
        enum MTBCmdSetModes mode,
        long timeout );
    VARIANT_BOOL SetPosition_4 (
        _bstr_t clientID,
        short Position,
        enum MTBCmdSetModes mode );
    HRESULT add_MTBPositionChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBPositionChangedEvent (
        IUnknown * value );
    HRESULT add_MTBTargetPositionChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBTargetPositionChangedEvent (
        IUnknown * value );
    HRESULT add_MTBPositionSettledEvent (
        IUnknown * value );
    HRESULT remove_MTBPositionSettledEvent (
        IUnknown * value );
    HRESULT add_MTBElementConfigurationChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBElementConfigurationChangedEvent (
        IUnknown * value );
    HRESULT add_MTBElementConfigurationFinishedEvent (
        IUnknown * value );
    HRESULT remove_MTBElementConfigurationFinishedEvent (
        IUnknown * value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ short * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinPosition (
        /*[out,retval]*/ short * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxPosition (
        /*[out,retval]*/ short * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetElementCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetElement (
        /*[in]*/ long n,
        /*[out,retval]*/ struct IMTBChangerElement * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetPosition (
        /*[in]*/ short Position,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[in]*/ long timeout,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetPosition_2 (
        /*[in]*/ short Position,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetPosition_3 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ short Position,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[in]*/ long timeout,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetPosition_4 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ short Position,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_add_MTBPositionChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBPositionChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBTargetPositionChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBTargetPositionChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBPositionSettledEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBPositionSettledEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBElementConfigurationChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBElementConfigurationChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBElementConfigurationFinishedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBElementConfigurationFinishedEvent (
        /*[in]*/ IUnknown * value ) = 0;
};

struct __declspec(uuid("ece98745-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBShutter : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL Expose (
        long exposeTime,
        enum MTBCmdSetModes mode,
        long timeout );
    VARIANT_BOOL Expose_2 (
        long exposeTime,
        enum MTBCmdSetModes mode );
    VARIANT_BOOL Expose_3 (
        _bstr_t clientID,
        long exposeTime,
        enum MTBCmdSetModes mode,
        long timeout );
    VARIANT_BOOL Expose_4 (
        _bstr_t clientID,
        long exposeTime,
        enum MTBCmdSetModes mode );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Expose (
        /*[in]*/ long exposeTime,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[in]*/ long timeout,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Expose_2 (
        /*[in]*/ long exposeTime,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Expose_3 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ long exposeTime,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[in]*/ long timeout,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Expose_4 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ long exposeTime,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("ece98721-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBContinual : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsOnHWLimit))
    enum MTBLimits IsOnHWLimit;

    //
    // Wrapper methods for error-handling
    //

    double GetMinPosition (
        _bstr_t unit );
    double GetMaxPosition (
        _bstr_t unit );
    double TypicalDeviation (
        _bstr_t unit );
    double MaxDeviation (
        _bstr_t unit );
    double StepWidth (
        _bstr_t unit );
    enum MTBLimits GetIsOnHWLimit ( );
    double GetPosition (
        _bstr_t unit );
    VARIANT_BOOL SetPosition (
        double Position,
        _bstr_t unit,
        enum MTBCmdSetModes mode,
        long timeout );
    VARIANT_BOOL SetPosition_2 (
        double Position,
        _bstr_t unit,
        enum MTBCmdSetModes mode );
    VARIANT_BOOL SetPosition_3 (
        _bstr_t clientID,
        double Position,
        _bstr_t unit,
        enum MTBCmdSetModes mode,
        long timeout );
    VARIANT_BOOL SetPosition_4 (
        _bstr_t clientID,
        double Position,
        _bstr_t unit,
        enum MTBCmdSetModes mode );
    long GetPositionUnitCount ( );
    _bstr_t GetPositionUnit (
        long index );
    HRESULT add_MTBPositionChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBPositionChangedEvent (
        IUnknown * value );
    HRESULT add_MTBTargetPositionChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBTargetPositionChangedEvent (
        IUnknown * value );
    HRESULT add_MTBPositionSettledEvent (
        IUnknown * value );
    HRESULT remove_MTBPositionSettledEvent (
        IUnknown * value );
    HRESULT add_MTBHWLimitReachedEvent (
        IUnknown * value );
    HRESULT remove_MTBHWLimitReachedEvent (
        IUnknown * value );
    double GetTargetPosition (
        _bstr_t unit );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetMinPosition (
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetMaxPosition (
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_TypicalDeviation (
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_MaxDeviation (
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_StepWidth (
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsOnHWLimit (
        /*[out,retval]*/ enum MTBLimits * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetPosition (
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetPosition (
        /*[in]*/ double Position,
        /*[in]*/ BSTR unit,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[in]*/ long timeout,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetPosition_2 (
        /*[in]*/ double Position,
        /*[in]*/ BSTR unit,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetPosition_3 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ double Position,
        /*[in]*/ BSTR unit,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[in]*/ long timeout,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetPosition_4 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ double Position,
        /*[in]*/ BSTR unit,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetPositionUnitCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetPositionUnit (
        /*[in]*/ long index,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_add_MTBPositionChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBPositionChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBTargetPositionChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBTargetPositionChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBPositionSettledEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBPositionSettledEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBHWLimitReachedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBHWLimitReachedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_GetTargetPosition (
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("ece987c7-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBCSUSpinningDisk : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL SetDiskRotationOff (
        enum MTBCmdSetModes mode,
        long timeout );
    VARIANT_BOOL SetDiskRotationOff_2 (
        enum MTBCmdSetModes mode );
    VARIANT_BOOL SetDiskRotationOff_3 (
        _bstr_t clientID,
        enum MTBCmdSetModes mode,
        long timeout );
    VARIANT_BOOL SetDiskRotationOff_4 (
        _bstr_t clientID,
        enum MTBCmdSetModes mode );
    enum MTBOnOff GetDiskRotationOnOff ( );
    VARIANT_BOOL AdjustSpeedToExposureTime (
        double exposureTime,
        enum MTBCmdSetModes mode,
        long timeout );
    VARIANT_BOOL AdjustSpeedToExposureTime_2 (
        double exposureTime,
        enum MTBCmdSetModes mode );
    VARIANT_BOOL AdjustSpeedToExposureTime_3 (
        _bstr_t clientID,
        double exposureTime,
        enum MTBCmdSetModes mode,
        long timeout );
    VARIANT_BOOL AdjustSpeedToExposureTime_4 (
        _bstr_t clientID,
        double exposureTime,
        enum MTBCmdSetModes mode );
    HRESULT add_MTBDiskRotationOnOffChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBDiskRotationOnOffChangedEvent (
        IUnknown * value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetDiskRotationOff (
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[in]*/ long timeout,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetDiskRotationOff_2 (
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetDiskRotationOff_3 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[in]*/ long timeout,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetDiskRotationOff_4 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetDiskRotationOnOff (
        /*[out,retval]*/ enum MTBOnOff * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AdjustSpeedToExposureTime (
        /*[in]*/ double exposureTime,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[in]*/ long timeout,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AdjustSpeedToExposureTime_2 (
        /*[in]*/ double exposureTime,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AdjustSpeedToExposureTime_3 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ double exposureTime,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[in]*/ long timeout,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AdjustSpeedToExposureTime_4 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ double exposureTime,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_add_MTBDiskRotationOnOffChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBDiskRotationOnOffChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
};

struct __declspec(uuid("ece98770-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBCoupledZoom : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetObservationZoom))
    IMTBCoupledZoomZoomPtr ObservationZoom;
    __declspec(property(get=GetIlluminationZoom))
    IMTBCoupledZoomZoomPtr IlluminationZoom;

    //
    // Wrapper methods for error-handling
    //

    IMTBCoupledZoomZoomPtr GetObservationZoom ( );
    IMTBCoupledZoomZoomPtr GetIlluminationZoom ( );
    VARIANT_BOOL SetZoomCoupling (
        enum MTBOnOff onOff,
        enum MTBCmdSetModes mode,
        long timeout );
    VARIANT_BOOL SetZoomCoupling_2 (
        enum MTBOnOff onOff,
        enum MTBCmdSetModes mode );
    VARIANT_BOOL SetZoomCoupling_3 (
        _bstr_t clientID,
        enum MTBOnOff onOff,
        enum MTBCmdSetModes mode,
        long timeout );
    VARIANT_BOOL SetZoomCoupling_4 (
        _bstr_t clientID,
        enum MTBOnOff onOff,
        enum MTBCmdSetModes mode );
    enum MTBOnOff GetZoomCoupling ( );
    HRESULT add_MTBZoomCouplingChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBZoomCouplingChangedEvent (
        IUnknown * value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ObservationZoom (
        /*[out,retval]*/ struct IMTBCoupledZoomZoom * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IlluminationZoom (
        /*[out,retval]*/ struct IMTBCoupledZoomZoom * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetZoomCoupling (
        /*[in]*/ enum MTBOnOff onOff,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[in]*/ long timeout,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetZoomCoupling_2 (
        /*[in]*/ enum MTBOnOff onOff,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetZoomCoupling_3 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ enum MTBOnOff onOff,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[in]*/ long timeout,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetZoomCoupling_4 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ enum MTBOnOff onOff,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetZoomCoupling (
        /*[out,retval]*/ enum MTBOnOff * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_add_MTBZoomCouplingChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBZoomCouplingChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
};

struct __declspec(uuid("ece98775-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBFluorescenceLamp : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    long GetLevelCount ( );
    VARIANT_BOOL SetLevel (
        long level,
        enum MTBCmdSetModes mode,
        long timeout );
    VARIANT_BOOL SetLevel_2 (
        long level,
        enum MTBCmdSetModes mode );
    VARIANT_BOOL SetLevel_3 (
        _bstr_t clientID,
        long level,
        enum MTBCmdSetModes mode,
        long timeout );
    VARIANT_BOOL SetLevel_4 (
        _bstr_t clientID,
        long level,
        enum MTBCmdSetModes mode );
    long GetLevel ( );
    VARIANT_BOOL SetLevelPosition (
        double Position,
        _bstr_t unit,
        long level,
        enum MTBCmdSetModes mode,
        long timeout );
    VARIANT_BOOL SetLevelPosition_2 (
        double Position,
        _bstr_t unit,
        long level,
        enum MTBCmdSetModes mode );
    VARIANT_BOOL SetLevelPosition_3 (
        _bstr_t clientID,
        double Position,
        _bstr_t unit,
        long level,
        enum MTBCmdSetModes mode,
        long timeout );
    VARIANT_BOOL SetLevelPosition_4 (
        _bstr_t clientID,
        double Position,
        _bstr_t unit,
        long level,
        enum MTBCmdSetModes mode );
    double GetLevelPosition (
        _bstr_t unit,
        long level );
    long GetLampHours ( );
    VARIANT_BOOL IsWarmingUp ( );
    HRESULT add_MTBLevelChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBLevelChangedEvent (
        IUnknown * value );
    HRESULT add_MTBLevelPositionChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBLevelPositionChangedEvent (
        IUnknown * value );
    HRESULT add_MTBWarmingUpChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBWarmingUpChangedEvent (
        IUnknown * value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetLevelCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetLevel (
        /*[in]*/ long level,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[in]*/ long timeout,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetLevel_2 (
        /*[in]*/ long level,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetLevel_3 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ long level,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[in]*/ long timeout,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetLevel_4 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ long level,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetLevel (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetLevelPosition (
        /*[in]*/ double Position,
        /*[in]*/ BSTR unit,
        /*[in]*/ long level,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[in]*/ long timeout,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetLevelPosition_2 (
        /*[in]*/ double Position,
        /*[in]*/ BSTR unit,
        /*[in]*/ long level,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetLevelPosition_3 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ double Position,
        /*[in]*/ BSTR unit,
        /*[in]*/ long level,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[in]*/ long timeout,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetLevelPosition_4 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ double Position,
        /*[in]*/ BSTR unit,
        /*[in]*/ long level,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetLevelPosition (
        /*[in]*/ BSTR unit,
        /*[in]*/ long level,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetLampHours (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsWarmingUp (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_add_MTBLevelChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBLevelChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBLevelPositionChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBLevelPositionChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBWarmingUpChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBWarmingUpChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
};

struct __declspec(uuid("ece9878d-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBIncubationChannel : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL SetOnOff (
        enum MTBOnOff onOff,
        enum MTBCmdSetModes mode,
        long timeout );
    VARIANT_BOOL SetOnOff_2 (
        enum MTBOnOff onOff,
        enum MTBCmdSetModes mode );
    VARIANT_BOOL SetOnOff_3 (
        _bstr_t clientID,
        enum MTBOnOff onOff,
        enum MTBCmdSetModes mode,
        long timeout );
    VARIANT_BOOL SetOnOff_4 (
        _bstr_t clientID,
        enum MTBOnOff onOff,
        enum MTBCmdSetModes mode );
    enum MTBOnOff GetOnOff ( );
    HRESULT add_MTBOnOffChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBOnOffChangedEvent (
        IUnknown * value );
    HRESULT add_MTBNameChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBNameChangedEvent (
        IUnknown * value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetOnOff (
        /*[in]*/ enum MTBOnOff onOff,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[in]*/ long timeout,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetOnOff_2 (
        /*[in]*/ enum MTBOnOff onOff,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetOnOff_3 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ enum MTBOnOff onOff,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[in]*/ long timeout,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetOnOff_4 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ enum MTBOnOff onOff,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetOnOff (
        /*[out,retval]*/ enum MTBOnOff * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_add_MTBOnOffChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBOnOffChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBNameChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBNameChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
};

struct __declspec(uuid("ece987dd-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBBatchCommander : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBatchComponents))
    SAFEARRAY * BatchComponents;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetBatchComponents ( );
    VARIANT_BOOL SetPosition (
        SAFEARRAY * positions,
        enum MTBCmdSetModes mode,
        long timeout );
    VARIANT_BOOL SetPosition_2 (
        SAFEARRAY * positions,
        enum MTBCmdSetModes mode );
    VARIANT_BOOL SetPosition_3 (
        _bstr_t clientID,
        SAFEARRAY * positions,
        enum MTBCmdSetModes mode,
        long timeout );
    VARIANT_BOOL SetPosition_4 (
        _bstr_t clientID,
        SAFEARRAY * positions,
        enum MTBCmdSetModes mode );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BatchComponents (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetPosition (
        /*[in]*/ SAFEARRAY * positions,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[in]*/ long timeout,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetPosition_2 (
        /*[in]*/ SAFEARRAY * positions,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetPosition_3 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ SAFEARRAY * positions,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[in]*/ long timeout,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetPosition_4 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ SAFEARRAY * positions,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

enum __declspec(uuid("ece98727-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBMotorization
{
    MTBMotorization_Manual = 0,
    MTBMotorization_Coded = 1,
    MTBMotorization_Motorized = 2
};

enum __declspec(uuid("ece98792-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBSaturationType
{
    MTBSaturationType_None = 0,
    MTBSaturationType_High = 1,
    MTBSaturationType_Low = 2
};

struct __declspec(uuid("ece98791-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBIncubationCO2Channel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSaturation))
    enum MTBSaturationType Saturation;

    //
    // Wrapper methods for error-handling
    //

    enum MTBSaturationType GetSaturation ( );
    HRESULT add_MTBSaturationChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBSaturationChangedEvent (
        IUnknown * value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Saturation (
        /*[out,retval]*/ enum MTBSaturationType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_add_MTBSaturationChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBSaturationChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
};

enum __declspec(uuid("ece987a0-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBFluorescenceLEDOperationMode
{
    MTBFluorescenceLEDOperationMode_Changing = 0,
    MTBFluorescenceLEDOperationMode_LEDLight = 1,
    MTBFluorescenceLEDOperationMode_LEDTriggerBuffer = 2,
    MTBFluorescenceLEDOperationMode_ExternalLight = 4
};

enum __declspec(uuid("ece987a1-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBFluorescenceLEDTriggerMode
{
    MTBFluorescenceLEDTriggerMode_Continuous = 0,
    MTBFluorescenceLEDTriggerMode_Pulsed = 1,
    MTBFluorescenceLEDTriggerMode_Gated = 2
};

struct __declspec(uuid("ece9879f-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBFluorescenceLEDControl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberOfLEDs))
    long NumberOfLEDs;
    __declspec(property(get=GetLED))
    SAFEARRAY * LED;

    //
    // Wrapper methods for error-handling
    //

    long GetNumberOfLEDs ( );
    SAFEARRAY * GetLED ( );
    HRESULT GetOperationMode (
        enum MTBFluorescenceLEDOperationMode * operationMode,
        enum MTBFluorescenceLEDTriggerMode * triggerMode );
    VARIANT_BOOL SetOperationMode (
        enum MTBFluorescenceLEDOperationMode operationMode,
        enum MTBFluorescenceLEDTriggerMode triggerMode,
        enum MTBCmdSetModes cmdSetMode,
        long timeout );
    VARIANT_BOOL SetOperationMode_2 (
        enum MTBFluorescenceLEDOperationMode operationMode,
        enum MTBFluorescenceLEDTriggerMode triggerMode,
        enum MTBCmdSetModes cmdSetMode );
    VARIANT_BOOL SetOperationMode_3 (
        _bstr_t clientID,
        enum MTBFluorescenceLEDOperationMode operationMode,
        enum MTBFluorescenceLEDTriggerMode triggerMode,
        enum MTBCmdSetModes cmdSetMode,
        long timeout );
    VARIANT_BOOL SetOperationMode_4 (
        _bstr_t clientID,
        enum MTBFluorescenceLEDOperationMode operationMode,
        enum MTBFluorescenceLEDTriggerMode triggerMode,
        enum MTBCmdSetModes cmdSetMode );
    HRESULT SetTriggerBufferEntry (
        unsigned char entryNumber,
        SAFEARRAY * brightness,
        _bstr_t unit,
        SAFEARRAY * duration );
    HRESULT GetTriggerBufferEntry (
        unsigned char entryNumber,
        SAFEARRAY * * brightness,
        _bstr_t unit,
        SAFEARRAY * * duration );
    HRESULT SetTriggerBufferPointer (
        unsigned char entryNumber );
    unsigned char GetTriggerBufferPointer ( );
    HRESULT SetInvertTriggerSignal (
        SAFEARRAY * triggerIn,
        SAFEARRAY * triggerOut );
    HRESULT GetInvertTriggerSignal (
        SAFEARRAY * * triggerIn,
        SAFEARRAY * * triggerOut );
    HRESULT add_MTBOperationModeChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBOperationModeChangedEvent (
        IUnknown * value );
    HRESULT add_MTBTriggerBufferEntryChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBTriggerBufferEntryChangedEvent (
        IUnknown * value );
    HRESULT add_MTBInvertTriggerSignalChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBInvertTriggerSignalChangedEvent (
        IUnknown * value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumberOfLEDs (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LED (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetOperationMode (
        /*[out]*/ enum MTBFluorescenceLEDOperationMode * operationMode,
        /*[out]*/ enum MTBFluorescenceLEDTriggerMode * triggerMode ) = 0;
      virtual HRESULT __stdcall raw_SetOperationMode (
        /*[in]*/ enum MTBFluorescenceLEDOperationMode operationMode,
        /*[in]*/ enum MTBFluorescenceLEDTriggerMode triggerMode,
        /*[in]*/ enum MTBCmdSetModes cmdSetMode,
        /*[in]*/ long timeout,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetOperationMode_2 (
        /*[in]*/ enum MTBFluorescenceLEDOperationMode operationMode,
        /*[in]*/ enum MTBFluorescenceLEDTriggerMode triggerMode,
        /*[in]*/ enum MTBCmdSetModes cmdSetMode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetOperationMode_3 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ enum MTBFluorescenceLEDOperationMode operationMode,
        /*[in]*/ enum MTBFluorescenceLEDTriggerMode triggerMode,
        /*[in]*/ enum MTBCmdSetModes cmdSetMode,
        /*[in]*/ long timeout,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetOperationMode_4 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ enum MTBFluorescenceLEDOperationMode operationMode,
        /*[in]*/ enum MTBFluorescenceLEDTriggerMode triggerMode,
        /*[in]*/ enum MTBCmdSetModes cmdSetMode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetTriggerBufferEntry (
        /*[in]*/ unsigned char entryNumber,
        /*[in]*/ SAFEARRAY * brightness,
        /*[in]*/ BSTR unit,
        /*[in]*/ SAFEARRAY * duration ) = 0;
      virtual HRESULT __stdcall raw_GetTriggerBufferEntry (
        /*[in]*/ unsigned char entryNumber,
        /*[out]*/ SAFEARRAY * * brightness,
        /*[in]*/ BSTR unit,
        /*[out]*/ SAFEARRAY * * duration ) = 0;
      virtual HRESULT __stdcall raw_SetTriggerBufferPointer (
        /*[in]*/ unsigned char entryNumber ) = 0;
      virtual HRESULT __stdcall raw_GetTriggerBufferPointer (
        /*[out,retval]*/ unsigned char * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetInvertTriggerSignal (
        /*[in]*/ SAFEARRAY * triggerIn,
        /*[in]*/ SAFEARRAY * triggerOut ) = 0;
      virtual HRESULT __stdcall raw_GetInvertTriggerSignal (
        /*[out]*/ SAFEARRAY * * triggerIn,
        /*[out]*/ SAFEARRAY * * triggerOut ) = 0;
      virtual HRESULT __stdcall raw_add_MTBOperationModeChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBOperationModeChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBTriggerBufferEntryChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBTriggerBufferEntryChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBInvertTriggerSignalChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBInvertTriggerSignalChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
};

enum __declspec(uuid("ece987b1-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBFocusStabilizerPeriodicallyOnOffChangedReason
{
    MTBFocusStabilizerPeriodicallyOnOffChangedReason_Command = 0,
    MTBFocusStabilizerPeriodicallyOnOffChangedReason_Error = 1,
    MTBFocusStabilizerPeriodicallyOnOffChangedReason_Focus = 2,
    MTBFocusStabilizerPeriodicallyOnOffChangedReason_Objective = 3
};

enum __declspec(uuid("ece987c2-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBFocusStabilizerDataType
{
    MTBFocusStabilizerDataType_Origin = 0,
    MTBFocusStabilizerDataType_Current = 1
};

struct __declspec(uuid("ece987b2-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBFocusStabilizer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getperiod,put=Putperiod))
    unsigned long period;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL StabilizePeriodically (
        enum MTBOnOff onOff );
    VARIANT_BOOL StabilizePeriodically_2 (
        enum MTBOnOff onOff,
        unsigned long period );
    enum MTBOnOff GetStabilizePeriodicallyOnOff (
        enum MTBFocusStabilizerPeriodicallyOnOffChangedReason * reason );
    unsigned long Getperiod ( );
    void Putperiod (
        unsigned long pRetVal );
    VARIANT_BOOL StabilizeNow (
        enum MTBCmdSetModes mode );
    VARIANT_BOOL StabilizeNow_2 (
        enum MTBCmdSetModes mode,
        long timeout );
    VARIANT_BOOL InitOnCurrentFocusPosition (
        enum MTBCmdSetModes mode );
    VARIANT_BOOL InitOnCurrentFocusPosition_2 (
        enum MTBCmdSetModes mode,
        long timeout );
    VARIANT_BOOL InitOnCurrentFocusPosition_3 (
        _bstr_t clientID,
        enum MTBCmdSetModes mode );
    VARIANT_BOOL InitOnCurrentFocusPosition_4 (
        _bstr_t clientID,
        enum MTBCmdSetModes mode,
        long timeout );
    VARIANT_BOOL InitOnCurrentFocusPosition_5 (
        SAFEARRAY * * data );
    VARIANT_BOOL InitOnCurrentFocusPosition_6 (
        SAFEARRAY * * data,
        long timeout );
    VARIANT_BOOL InitOnCurrentFocusPosition_7 (
        _bstr_t clientID,
        SAFEARRAY * * data );
    VARIANT_BOOL InitOnCurrentFocusPosition_8 (
        _bstr_t clientID,
        SAFEARRAY * * data,
        long timeout );
    VARIANT_BOOL InitWithStabilizingData (
        SAFEARRAY * data,
        enum MTBCmdSetModes mode );
    VARIANT_BOOL InitWithStabilizingData_2 (
        SAFEARRAY * data,
        enum MTBCmdSetModes mode,
        long timeout );
    VARIANT_BOOL InitWithStabilizingData_3 (
        _bstr_t clientID,
        SAFEARRAY * data,
        enum MTBCmdSetModes mode );
    VARIANT_BOOL InitWithStabilizingData_4 (
        _bstr_t clientID,
        SAFEARRAY * data,
        enum MTBCmdSetModes mode,
        long timeout );
    SAFEARRAY * GetStabilizerData (
        enum MTBFocusStabilizerDataType type );
    HRESULT add_MTBPeriodicallyOnOffChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBPeriodicallyOnOffChangedEvent (
        IUnknown * value );
    HRESULT add_MTBPeriodChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBPeriodChangedEvent (
        IUnknown * value );
    HRESULT add_MTBDataChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBDataChangedEvent (
        IUnknown * value );
    double GetDeviation (
        _bstr_t unit );
    VARIANT_BOOL SetExclusiveMode (
        enum MTBOnOff onOff );
    VARIANT_BOOL SetExclusiveMode_2 (
        _bstr_t clientID,
        enum MTBOnOff onOff );
    enum MTBOnOff GetExclusiveModeOnOff ( );
    HRESULT add_MTBExclusiveModeChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBExclusiveModeChangedEvent (
        IUnknown * value );
    HRESULT add_MTBDeviationChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBDeviationChangedEvent (
        IUnknown * value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_StabilizePeriodically (
        /*[in]*/ enum MTBOnOff onOff,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_StabilizePeriodically_2 (
        /*[in]*/ enum MTBOnOff onOff,
        /*[in]*/ unsigned long period,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetStabilizePeriodicallyOnOff (
        /*[out]*/ enum MTBFocusStabilizerPeriodicallyOnOffChangedReason * reason,
        /*[out,retval]*/ enum MTBOnOff * pRetVal ) = 0;
      virtual HRESULT __stdcall get_period (
        /*[out,retval]*/ unsigned long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_period (
        /*[in]*/ unsigned long pRetVal ) = 0;
      virtual HRESULT __stdcall raw_StabilizeNow (
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_StabilizeNow_2 (
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[in]*/ long timeout,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitOnCurrentFocusPosition (
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitOnCurrentFocusPosition_2 (
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[in]*/ long timeout,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitOnCurrentFocusPosition_3 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitOnCurrentFocusPosition_4 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[in]*/ long timeout,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitOnCurrentFocusPosition_5 (
        /*[out]*/ SAFEARRAY * * data,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitOnCurrentFocusPosition_6 (
        /*[out]*/ SAFEARRAY * * data,
        /*[in]*/ long timeout,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitOnCurrentFocusPosition_7 (
        /*[in]*/ BSTR clientID,
        /*[out]*/ SAFEARRAY * * data,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitOnCurrentFocusPosition_8 (
        /*[in]*/ BSTR clientID,
        /*[out]*/ SAFEARRAY * * data,
        /*[in]*/ long timeout,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitWithStabilizingData (
        /*[in]*/ SAFEARRAY * data,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitWithStabilizingData_2 (
        /*[in]*/ SAFEARRAY * data,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[in]*/ long timeout,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitWithStabilizingData_3 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ SAFEARRAY * data,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitWithStabilizingData_4 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ SAFEARRAY * data,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[in]*/ long timeout,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetStabilizerData (
        /*[in]*/ enum MTBFocusStabilizerDataType type,
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_add_MTBPeriodicallyOnOffChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBPeriodicallyOnOffChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBPeriodChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBPeriodChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBDataChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBDataChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_GetDeviation (
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetExclusiveMode (
        /*[in]*/ enum MTBOnOff onOff,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetExclusiveMode_2 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ enum MTBOnOff onOff,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetExclusiveModeOnOff (
        /*[out,retval]*/ enum MTBOnOff * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_add_MTBExclusiveModeChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBExclusiveModeChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBDeviationChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBDeviationChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
};

enum __declspec(uuid("ece987b7-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBObservationMode
{
    MTBObservationMode_Mono = 0,
    MTBObservationMode_Stereo = 1
};

struct __declspec(uuid("ece987b6-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBObservationMode : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getmode))
    enum MTBObservationMode mode;

    //
    // Wrapper methods for error-handling
    //

    enum MTBObservationMode Getmode ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_mode (
        /*[out,retval]*/ enum MTBObservationMode * pRetVal ) = 0;
};

enum __declspec(uuid("ece987be-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBAxisTriggerMode
{
    MTBAxisTriggerMode_TriggerOff = 0,
    MTBAxisTriggerMode_TriggerIn = 1,
    MTBAxisTriggerMode_TriggerOutOnListPosition = 2,
    MTBAxisTriggerMode_TriggerOutOnStep = 4
};

struct __declspec(uuid("ece987bd-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBAxisTrigger : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAvailableTriggerModes))
    enum MTBAxisTriggerMode AvailableTriggerModes;
    __declspec(property(get=GetMaxTriggerPositionListLength))
    long MaxTriggerPositionListLength;
    __declspec(property(get=GetTriggerPositionListLength))
    long TriggerPositionListLength;

    //
    // Wrapper methods for error-handling
    //

    enum MTBAxisTriggerMode GetAvailableTriggerModes ( );
    enum MTBAxisTriggerMode GetTriggerMode ( );
    VARIANT_BOOL SetTriggerMode (
        enum MTBAxisTriggerMode triggerMode,
        enum MTBCmdSetModes cmdSetMode,
        long timeout );
    VARIANT_BOOL SetTriggerMode_2 (
        enum MTBAxisTriggerMode triggerMode,
        enum MTBCmdSetModes cmdSetMode );
    VARIANT_BOOL SetTriggerMode_3 (
        _bstr_t clientID,
        enum MTBAxisTriggerMode triggerMode,
        enum MTBCmdSetModes cmdSetMode,
        long timeout );
    VARIANT_BOOL SetTriggerMode_4 (
        _bstr_t clientID,
        enum MTBAxisTriggerMode triggerMode,
        enum MTBCmdSetModes cmdSetMode );
    long GetMaxTriggerPositionListLength ( );
    long GetTriggerPositionListLength ( );
    SAFEARRAY * GetTriggerPositionList (
        _bstr_t unit );
    VARIANT_BOOL SetTriggerPositionList (
        SAFEARRAY * list,
        _bstr_t unit );
    VARIANT_BOOL SetTriggerPositionList_2 (
        _bstr_t clientID,
        SAFEARRAY * list,
        _bstr_t unit );
    double GetTriggerPositionListEntry (
        long index,
        _bstr_t unit );
    VARIANT_BOOL SetTriggerPositionListEntry (
        long index,
        double entry,
        _bstr_t unit );
    VARIANT_BOOL SetTriggerPositionListEntry_2 (
        _bstr_t clientID,
        long index,
        double entry,
        _bstr_t unit );
    VARIANT_BOOL ClearTriggerPositionList ( );
    VARIANT_BOOL ClearTriggerPositionList_2 (
        _bstr_t clientID );
    long GetTriggerPositionListPointer ( );
    VARIANT_BOOL SetTriggerPositionListPointer (
        long pointer );
    VARIANT_BOOL SetTriggerPositionListPointer_2 (
        _bstr_t clientID,
        long pointer );
    VARIANT_BOOL GetTriggerStepDefinition (
        double * startPosition,
        double * stepSize,
        _bstr_t unit,
        long * numOfSteps );
    VARIANT_BOOL SetTriggerStepDefinition (
        double startPosition,
        double stepSize,
        _bstr_t unit,
        long numOfSteps );
    VARIANT_BOOL SetTriggerStepDefinition_2 (
        _bstr_t clientID,
        double startPosition,
        double stepSize,
        _bstr_t unit,
        long numOfSteps );
    long GetTriggerStepNumber ( );
    VARIANT_BOOL SetTriggerStepNumber (
        long stepNumber );
    VARIANT_BOOL SetTriggerStepNumber_2 (
        _bstr_t clientID,
        long stepNumber );
    HRESULT add_MTBAxisTriggerModeChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBAxisTriggerModeChangedEvent (
        IUnknown * value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AvailableTriggerModes (
        /*[out,retval]*/ enum MTBAxisTriggerMode * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetTriggerMode (
        /*[out,retval]*/ enum MTBAxisTriggerMode * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetTriggerMode (
        /*[in]*/ enum MTBAxisTriggerMode triggerMode,
        /*[in]*/ enum MTBCmdSetModes cmdSetMode,
        /*[in]*/ long timeout,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetTriggerMode_2 (
        /*[in]*/ enum MTBAxisTriggerMode triggerMode,
        /*[in]*/ enum MTBCmdSetModes cmdSetMode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetTriggerMode_3 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ enum MTBAxisTriggerMode triggerMode,
        /*[in]*/ enum MTBCmdSetModes cmdSetMode,
        /*[in]*/ long timeout,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetTriggerMode_4 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ enum MTBAxisTriggerMode triggerMode,
        /*[in]*/ enum MTBCmdSetModes cmdSetMode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxTriggerPositionListLength (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TriggerPositionListLength (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetTriggerPositionList (
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetTriggerPositionList (
        /*[in]*/ SAFEARRAY * list,
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetTriggerPositionList_2 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ SAFEARRAY * list,
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetTriggerPositionListEntry (
        /*[in]*/ long index,
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetTriggerPositionListEntry (
        /*[in]*/ long index,
        /*[in]*/ double entry,
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetTriggerPositionListEntry_2 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ long index,
        /*[in]*/ double entry,
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ClearTriggerPositionList (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ClearTriggerPositionList_2 (
        /*[in]*/ BSTR clientID,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetTriggerPositionListPointer (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetTriggerPositionListPointer (
        /*[in]*/ long pointer,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetTriggerPositionListPointer_2 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ long pointer,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetTriggerStepDefinition (
        /*[out]*/ double * startPosition,
        /*[out]*/ double * stepSize,
        /*[in]*/ BSTR unit,
        /*[out]*/ long * numOfSteps,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetTriggerStepDefinition (
        /*[in]*/ double startPosition,
        /*[in]*/ double stepSize,
        /*[in]*/ BSTR unit,
        /*[in]*/ long numOfSteps,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetTriggerStepDefinition_2 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ double startPosition,
        /*[in]*/ double stepSize,
        /*[in]*/ BSTR unit,
        /*[in]*/ long numOfSteps,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetTriggerStepNumber (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetTriggerStepNumber (
        /*[in]*/ long stepNumber,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetTriggerStepNumber_2 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ long stepNumber,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_add_MTBAxisTriggerModeChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBAxisTriggerModeChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
};

enum __declspec(uuid("ece987d6-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBAOTFControlMode
{
    MTBAOTFControlMode_Internal = 0,
    MTBAOTFControlMode_External = 1
};

struct __declspec(uuid("ece987e4-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBMDSController : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberOfAOTFs))
    long NumberOfAOTFs;
    __declspec(property(get=GetAOTF))
    SAFEARRAY * AOTF;
    __declspec(property(get=GetcontrolMode))
    enum MTBAOTFControlMode controlMode;

    //
    // Wrapper methods for error-handling
    //

    long GetNumberOfAOTFs ( );
    SAFEARRAY * GetAOTF ( );
    VARIANT_BOOL SetControlMode (
        enum MTBAOTFControlMode mode );
    VARIANT_BOOL SetControlMode_2 (
        _bstr_t clientID,
        enum MTBAOTFControlMode controlMode );
    enum MTBAOTFControlMode GetcontrolMode ( );
    HRESULT add_MTBControlModeChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBControlModeChangedEvent (
        IUnknown * value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumberOfAOTFs (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AOTF (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetControlMode (
        /*[in]*/ enum MTBAOTFControlMode mode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetControlMode_2 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ enum MTBAOTFControlMode controlMode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_controlMode (
        /*[out,retval]*/ enum MTBAOTFControlMode * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_add_MTBControlModeChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBControlModeChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
};

enum __declspec(uuid("ece987d9-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBLampType
{
    MTBLampType_Halogen = 0,
    MTBLampType_LED = 1,
    MTBLampType_FluorescenceLED = 2,
    MTBLampType_LaserLine = 3
};

struct __declspec(uuid("ece98728-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBLamp : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHas3200K))
    VARIANT_BOOL Has3200K;
    __declspec(property(get=GetHasOnOff))
    VARIANT_BOOL HasOnOff;
    __declspec(property(get=GetHasRemote))
    VARIANT_BOOL HasRemote;
    __declspec(property(get=GetLightPathLocation))
    enum MTBLightPathLocations LightPathLocation;
    __declspec(property(get=GetIsActive))
    VARIANT_BOOL IsActive;
    __declspec(property(get=GetLampType))
    enum MTBLampType LampType;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetHas3200K ( );
    VARIANT_BOOL GetHasOnOff ( );
    VARIANT_BOOL GetHasRemote ( );
    VARIANT_BOOL Set3200K (
        enum MTBOnOff onOff,
        enum MTBCmdSetModes mode,
        long timeout );
    VARIANT_BOOL Set3200K_2 (
        enum MTBOnOff onOff,
        enum MTBCmdSetModes mode );
    VARIANT_BOOL Set3200K_3 (
        _bstr_t clientID,
        enum MTBOnOff onOff,
        enum MTBCmdSetModes mode,
        long timeout );
    VARIANT_BOOL Set3200K_4 (
        _bstr_t clientID,
        enum MTBOnOff onOff,
        enum MTBCmdSetModes mode );
    enum MTBOnOff Get3200K ( );
    VARIANT_BOOL SetOnOff (
        enum MTBOnOff onOff,
        enum MTBCmdSetModes mode,
        long timeout );
    VARIANT_BOOL SetOnOff_2 (
        enum MTBOnOff onOff,
        enum MTBCmdSetModes mode );
    VARIANT_BOOL SetOnOff_3 (
        _bstr_t clientID,
        enum MTBOnOff onOff,
        enum MTBCmdSetModes mode,
        long timeout );
    VARIANT_BOOL SetOnOff_4 (
        _bstr_t clientID,
        enum MTBOnOff onOff,
        enum MTBCmdSetModes mode );
    enum MTBOnOff GetOnOff ( );
    VARIANT_BOOL SetRemote (
        enum MTBOnOff onOff );
    VARIANT_BOOL SetRemote_2 (
        _bstr_t clientID,
        enum MTBOnOff onOff );
    enum MTBOnOff GetRemote ( );
    enum MTBLightPathLocations GetLightPathLocation ( );
    VARIANT_BOOL GetIsActive ( );
    HRESULT add_MTB3200KChangedEvent (
        IUnknown * value );
    HRESULT remove_MTB3200KChangedEvent (
        IUnknown * value );
    HRESULT add_MTBOnOffChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBOnOffChangedEvent (
        IUnknown * value );
    HRESULT add_MTBRemoteChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBRemoteChangedEvent (
        IUnknown * value );
    HRESULT add_MTBActiveChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBActiveChangedEvent (
        IUnknown * value );
    enum MTBLampType GetLampType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Has3200K (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HasOnOff (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HasRemote (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Set3200K (
        /*[in]*/ enum MTBOnOff onOff,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[in]*/ long timeout,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Set3200K_2 (
        /*[in]*/ enum MTBOnOff onOff,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Set3200K_3 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ enum MTBOnOff onOff,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[in]*/ long timeout,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Set3200K_4 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ enum MTBOnOff onOff,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Get3200K (
        /*[out,retval]*/ enum MTBOnOff * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetOnOff (
        /*[in]*/ enum MTBOnOff onOff,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[in]*/ long timeout,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetOnOff_2 (
        /*[in]*/ enum MTBOnOff onOff,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetOnOff_3 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ enum MTBOnOff onOff,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[in]*/ long timeout,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetOnOff_4 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ enum MTBOnOff onOff,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetOnOff (
        /*[out,retval]*/ enum MTBOnOff * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetRemote (
        /*[in]*/ enum MTBOnOff onOff,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetRemote_2 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ enum MTBOnOff onOff,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetRemote (
        /*[out,retval]*/ enum MTBOnOff * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LightPathLocation (
        /*[out,retval]*/ enum MTBLightPathLocations * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsActive (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_add_MTB3200KChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTB3200KChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBOnOffChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBOnOffChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBRemoteChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBRemoteChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBActiveChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBActiveChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall get_LampType (
        /*[out,retval]*/ enum MTBLampType * pRetVal ) = 0;
};

enum __declspec(uuid("ece987da-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBAOTFFunctions
{
    MTBAOTFFunctions_None = 0,
    MTBAOTFFunctions_Tirf = 1,
    MTBAOTFFunctions_Frap = 2,
    MTBAOTFFunctions_YokogawaCSU = 4
};

struct __declspec(uuid("ece987d2-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBMultiChannelAOTF : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberOfLaserLines))
    long NumberOfLaserLines;
    __declspec(property(get=GetLaserLine))
    SAFEARRAY * LaserLine;
    __declspec(property(get=GetNumberOfOutputChannels))
    long NumberOfOutputChannels;
    __declspec(property(get=GetFunctions))
    enum MTBAOTFFunctions Functions;
    __declspec(property(get=GetcontrolMode))
    enum MTBAOTFControlMode controlMode;

    //
    // Wrapper methods for error-handling
    //

    long GetNumberOfLaserLines ( );
    SAFEARRAY * GetLaserLine ( );
    long GetNumberOfOutputChannels ( );
    enum MTBAOTFFunctions GetFunctions ( );
    VARIANT_BOOL CanSwitchOnLines (
        SAFEARRAY * lineSwitchingStates );
    VARIANT_BOOL CanSwitchOnLines_2 (
        SAFEARRAY * lineSwitchingStates,
        SAFEARRAY * * outputChannels );
    VARIANT_BOOL SetControlMode (
        enum MTBAOTFControlMode mode );
    VARIANT_BOOL SetControlMode_2 (
        _bstr_t clientID,
        enum MTBAOTFControlMode controlMode );
    enum MTBAOTFControlMode GetcontrolMode ( );
    VARIANT_BOOL SelectLines (
        SAFEARRAY * lineSwitchingStates,
        SAFEARRAY * positions,
        _bstr_t unit,
        SAFEARRAY * * outputChannels );
    VARIANT_BOOL SelectLines_2 (
        _bstr_t clientID,
        SAFEARRAY * lineSwitchingStates,
        SAFEARRAY * positions,
        _bstr_t unit,
        SAFEARRAY * * outputChannels );
    VARIANT_BOOL SwitchAllLinesOff ( );
    VARIANT_BOOL SwitchAllLinesOff_2 (
        _bstr_t clientID );
    HRESULT add_MTBControlModeChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBControlModeChangedEvent (
        IUnknown * value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumberOfLaserLines (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LaserLine (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfOutputChannels (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Functions (
        /*[out,retval]*/ enum MTBAOTFFunctions * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CanSwitchOnLines (
        /*[in]*/ SAFEARRAY * lineSwitchingStates,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CanSwitchOnLines_2 (
        /*[in]*/ SAFEARRAY * lineSwitchingStates,
        /*[out]*/ SAFEARRAY * * outputChannels,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
    virtual HRESULT _VtblGapPlaceholder1( ) { return E_NOTIMPL; }
      virtual HRESULT __stdcall raw_SetControlMode (
        /*[in]*/ enum MTBAOTFControlMode mode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetControlMode_2 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ enum MTBAOTFControlMode controlMode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_controlMode (
        /*[out,retval]*/ enum MTBAOTFControlMode * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SelectLines (
        /*[in]*/ SAFEARRAY * lineSwitchingStates,
        /*[in]*/ SAFEARRAY * positions,
        /*[in]*/ BSTR unit,
        /*[out]*/ SAFEARRAY * * outputChannels,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SelectLines_2 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ SAFEARRAY * lineSwitchingStates,
        /*[in]*/ SAFEARRAY * positions,
        /*[in]*/ BSTR unit,
        /*[out]*/ SAFEARRAY * * outputChannels,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SwitchAllLinesOff (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SwitchAllLinesOff_2 (
        /*[in]*/ BSTR clientID,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_add_MTBControlModeChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBControlModeChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
};

enum __declspec(uuid("ece987db-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBAccessibility
{
    MTBAccessibility_None = 0,
    MTBAccessibility_Configured = 1,
    MTBAccessibility_HardwareConnected = 2,
    MTBAccessibility_HardwareSimulated = 4,
    MTBAccessibility_HardwareUseRejected = 8,
    MTBAccessibility_Controllable = 6
};

enum __declspec(uuid("ece987dc-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBReflectorFeatures
{
    MTBReflectorFeatures_None = 0,
    MTBReflectorFeatures_HE = 1,
    MTBReflectorFeatures_TIRF = 2
};

struct __declspec(uuid("ece98709-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBReflector : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFeatures))
    enum MTBReflectorFeatures Features;

    //
    // Wrapper methods for error-handling
    //

    short GetWavelengthAreaCount ( );
    IMTBReflectorWavelengthAreaPtr GetWavelengthArea (
        short index );
    enum MTBReflectorFeatures GetFeatures ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetWavelengthAreaCount (
        /*[out,retval]*/ short * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetWavelengthArea (
        /*[in]*/ short index,
        /*[out,retval]*/ struct IMTBReflectorWavelengthArea * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Features (
        /*[out,retval]*/ enum MTBReflectorFeatures * pRetVal ) = 0;
};

enum __declspec(uuid("ece987f0-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBLaserSafety
{
    MTBLaserSafety_NotAvailable = 0,
    MTBLaserSafety_Safe = 1,
    MTBLaserSafety_Unsafe = 2
};

struct __declspec(uuid("ece98755-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBMicroscopeManager : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHasParfocalCorrection))
    VARIANT_BOOL HasParfocalCorrection;
    __declspec(property(get=GetParfocalCorrection,put=PutParfocalCorrection))
    enum MTBOnOff ParfocalCorrection;
    __declspec(property(get=GetLoadWorkCouplingOnOff,put=PutLoadWorkCouplingOnOff))
    enum MTBOnOff LoadWorkCouplingOnOff;
    __declspec(property(get=GetLightManagerModes))
    enum MTBLightManagerModes LightManagerModes;
    __declspec(property(get=GetLightManagerMode,put=PutLightManagerMode))
    enum MTBLightManagerModes LightManagerMode;
    __declspec(property(get=GetHasVignettingFreeModeTemporaryOnOff))
    VARIANT_BOOL HasVignettingFreeModeTemporaryOnOff;
    __declspec(property(get=GetHasLightManagerTemporaryOnOff))
    VARIANT_BOOL HasLightManagerTemporaryOnOff;
    __declspec(property(get=GetLightManagerTemporaryOnOff,put=PutLightManagerTemporaryOnOff))
    enum MTBOnOff LightManagerTemporaryOnOff;
    __declspec(property(get=GetVignettingFreeModeTemporaryOnOff,put=PutVignettingFreeModeTemporaryOnOff))
    enum MTBOnOff VignettingFreeModeTemporaryOnOff;
    __declspec(property(get=GetHasDazzleProtection))
    VARIANT_BOOL HasDazzleProtection;
    __declspec(property(get=GetDazzleProtectionOnOff,put=PutDazzleProtectionOnOff))
    enum MTBOnOff DazzleProtectionOnOff;
    __declspec(property(get=GetLaserSafety))
    enum MTBLaserSafety LaserSafety;
    __declspec(property(get=GetContrastManagerModes))
    enum MTBContrastManagerModes ContrastManagerModes;
    __declspec(property(get=GetContrastManagerMode,put=PutContrastManagerMode))
    enum MTBContrastManagerModes ContrastManagerMode;
    __declspec(property(get=GetContrastManagerContrastMethods))
    enum MTBContrastManagerContrastMethods ContrastManagerContrastMethods;
    __declspec(property(get=GetContrastManagerContrastMethod,put=PutContrastManagerContrastMethod))
    enum MTBContrastManagerContrastMethods ContrastManagerContrastMethod;
    __declspec(property(get=GetKeyFunctions))
    IMTBKeyFunctionsPtr KeyFunctions;
    __declspec(property(get=GetHasCondenserFocusing))
    VARIANT_BOOL HasCondenserFocusing;
    __declspec(property(get=GetCondenserFocusingOnOff,put=PutCondenserFocusingOnOff))
    enum MTBOnOff CondenserFocusingOnOff;
    __declspec(property(get=GetHasCurrentFeedOnOff))
    VARIANT_BOOL HasCurrentFeedOnOff;
    __declspec(property(get=GetCurrentFeedOnOff,put=PutCurrentFeedOnOff))
    enum MTBOnOff CurrentFeedOnOff;
    __declspec(property(get=GetHasLoadWorkCouplingOnOff))
    VARIANT_BOOL HasLoadWorkCouplingOnOff;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetHasParfocalCorrection ( );
    enum MTBOnOff GetParfocalCorrection ( );
    void PutParfocalCorrection (
        enum MTBOnOff pRetVal );
    enum MTBLightManagerModes GetLightManagerModes ( );
    enum MTBLightManagerModes GetLightManagerMode ( );
    void PutLightManagerMode (
        enum MTBLightManagerModes pRetVal );
    VARIANT_BOOL GetHasLightManagerTemporaryOnOff ( );
    enum MTBOnOff GetLightManagerTemporaryOnOff ( );
    void PutLightManagerTemporaryOnOff (
        enum MTBOnOff pRetVal );
    VARIANT_BOOL GetHasDazzleProtection ( );
    enum MTBOnOff GetDazzleProtectionOnOff ( );
    void PutDazzleProtectionOnOff (
        enum MTBOnOff pRetVal );
    enum MTBContrastManagerModes GetContrastManagerModes ( );
    enum MTBContrastManagerModes GetContrastManagerMode ( );
    void PutContrastManagerMode (
        enum MTBContrastManagerModes pRetVal );
    enum MTBContrastManagerContrastMethods GetContrastManagerContrastMethods ( );
    enum MTBContrastManagerContrastMethods GetContrastManagerContrastMethod ( );
    void PutContrastManagerContrastMethod (
        enum MTBContrastManagerContrastMethods pRetVal );
    HRESULT add_MTBParfocalCorrectionChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBParfocalCorrectionChangedEvent (
        IUnknown * value );
    HRESULT add_MTBLightManagerModeChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBLightManagerModeChangedEvent (
        IUnknown * value );
    HRESULT add_MTBLightManagerTemporaryOnOffChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBLightManagerTemporaryOnOffChangedEvent (
        IUnknown * value );
    HRESULT add_MTBDazzleProtectionOnOffChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBDazzleProtectionOnOffChangedEvent (
        IUnknown * value );
    HRESULT add_MTBContrastManagerContrastMethodsChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBContrastManagerContrastMethodsChangedEvent (
        IUnknown * value );
    HRESULT add_MTBContrastManagerContrastMethodChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBContrastManagerContrastMethodChangedEvent (
        IUnknown * value );
    HRESULT add_MTBContrastManagerModeChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBContrastManagerModeChangedEvent (
        IUnknown * value );
    IMTBKeyFunctionsPtr GetKeyFunctions ( );
    VARIANT_BOOL GetHasCondenserFocusing ( );
    enum MTBOnOff GetCondenserFocusingOnOff ( );
    void PutCondenserFocusingOnOff (
        enum MTBOnOff pRetVal );
    VARIANT_BOOL GetHasCurrentFeedOnOff ( );
    enum MTBOnOff GetCurrentFeedOnOff ( );
    void PutCurrentFeedOnOff (
        enum MTBOnOff pRetVal );
    HRESULT add_MTBCondenserFocusingOnOffChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBCondenserFocusingOnOffChangedEvent (
        IUnknown * value );
    HRESULT add_MTBCurrentFeedOnOffChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBCurrentFeedOnOffChangedEvent (
        IUnknown * value );
    VARIANT_BOOL GetHasLoadWorkCouplingOnOff ( );
    enum MTBOnOff GetLoadWorkCouplingOnOff ( );
    void PutLoadWorkCouplingOnOff (
        enum MTBOnOff pRetVal );
    HRESULT add_MTBLoadWorkCouplingOnOffChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBLoadWorkCouplingOnOffChangedEvent (
        IUnknown * value );
    VARIANT_BOOL GetHasVignettingFreeModeTemporaryOnOff ( );
    enum MTBOnOff GetVignettingFreeModeTemporaryOnOff ( );
    void PutVignettingFreeModeTemporaryOnOff (
        enum MTBOnOff pRetVal );
    HRESULT add_MTBVignettingFreeModeTemporaryOnOffChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBVignettingFreeModeTemporaryOnOffChangedEvent (
        IUnknown * value );
    enum MTBLaserSafety GetLaserSafety ( );
    HRESULT add_MTBLaserSafetyChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBLaserSafetyChangedEvent (
        IUnknown * value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_HasParfocalCorrection (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ParfocalCorrection (
        /*[out,retval]*/ enum MTBOnOff * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ParfocalCorrection (
        /*[in]*/ enum MTBOnOff pRetVal ) = 0;
      virtual HRESULT __stdcall get_LightManagerModes (
        /*[out,retval]*/ enum MTBLightManagerModes * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LightManagerMode (
        /*[out,retval]*/ enum MTBLightManagerModes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LightManagerMode (
        /*[in]*/ enum MTBLightManagerModes pRetVal ) = 0;
      virtual HRESULT __stdcall get_HasLightManagerTemporaryOnOff (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LightManagerTemporaryOnOff (
        /*[out,retval]*/ enum MTBOnOff * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LightManagerTemporaryOnOff (
        /*[in]*/ enum MTBOnOff pRetVal ) = 0;
      virtual HRESULT __stdcall get_HasDazzleProtection (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DazzleProtectionOnOff (
        /*[out,retval]*/ enum MTBOnOff * pRetVal ) = 0;
      virtual HRESULT __stdcall put_DazzleProtectionOnOff (
        /*[in]*/ enum MTBOnOff pRetVal ) = 0;
      virtual HRESULT __stdcall get_ContrastManagerModes (
        /*[out,retval]*/ enum MTBContrastManagerModes * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ContrastManagerMode (
        /*[out,retval]*/ enum MTBContrastManagerModes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ContrastManagerMode (
        /*[in]*/ enum MTBContrastManagerModes pRetVal ) = 0;
      virtual HRESULT __stdcall get_ContrastManagerContrastMethods (
        /*[out,retval]*/ enum MTBContrastManagerContrastMethods * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ContrastManagerContrastMethod (
        /*[out,retval]*/ enum MTBContrastManagerContrastMethods * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ContrastManagerContrastMethod (
        /*[in]*/ enum MTBContrastManagerContrastMethods pRetVal ) = 0;
      virtual HRESULT __stdcall raw_add_MTBParfocalCorrectionChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBParfocalCorrectionChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBLightManagerModeChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBLightManagerModeChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBLightManagerTemporaryOnOffChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBLightManagerTemporaryOnOffChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBDazzleProtectionOnOffChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBDazzleProtectionOnOffChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBContrastManagerContrastMethodsChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBContrastManagerContrastMethodsChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBContrastManagerContrastMethodChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBContrastManagerContrastMethodChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBContrastManagerModeChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBContrastManagerModeChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall get_KeyFunctions (
        /*[out,retval]*/ struct IMTBKeyFunctions * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HasCondenserFocusing (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CondenserFocusingOnOff (
        /*[out,retval]*/ enum MTBOnOff * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CondenserFocusingOnOff (
        /*[in]*/ enum MTBOnOff pRetVal ) = 0;
      virtual HRESULT __stdcall get_HasCurrentFeedOnOff (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CurrentFeedOnOff (
        /*[out,retval]*/ enum MTBOnOff * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CurrentFeedOnOff (
        /*[in]*/ enum MTBOnOff pRetVal ) = 0;
      virtual HRESULT __stdcall raw_add_MTBCondenserFocusingOnOffChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBCondenserFocusingOnOffChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBCurrentFeedOnOffChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBCurrentFeedOnOffChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall get_HasLoadWorkCouplingOnOff (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LoadWorkCouplingOnOff (
        /*[out,retval]*/ enum MTBOnOff * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LoadWorkCouplingOnOff (
        /*[in]*/ enum MTBOnOff pRetVal ) = 0;
      virtual HRESULT __stdcall raw_add_MTBLoadWorkCouplingOnOffChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBLoadWorkCouplingOnOffChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall get_HasVignettingFreeModeTemporaryOnOff (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_VignettingFreeModeTemporaryOnOff (
        /*[out,retval]*/ enum MTBOnOff * pRetVal ) = 0;
      virtual HRESULT __stdcall put_VignettingFreeModeTemporaryOnOff (
        /*[in]*/ enum MTBOnOff pRetVal ) = 0;
      virtual HRESULT __stdcall raw_add_MTBVignettingFreeModeTemporaryOnOffChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBVignettingFreeModeTemporaryOnOffChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall get_LaserSafety (
        /*[out,retval]*/ enum MTBLaserSafety * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_add_MTBLaserSafetyChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBLaserSafetyChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
};

struct __declspec(uuid("ece9870f-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBBaseEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT MTBErrorEvent (
        long code,
        _bstr_t msg );
    HRESULT MTBLockingChangedEvent (
        VARIANT_BOOL started );
    HRESULT MTBMonitoringChangedEvent (
        VARIANT_BOOL started,
        _bstr_t clientID );
    HRESULT MTBBusyChangedEvent (
        VARIANT_BOOL busy );
};

struct __declspec(uuid("ece987d1-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBTirfAngularAdjust : IDispatch
{};

struct __declspec(uuid("ece98736-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBContinualSpeed : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHasContinualStartSpeed))
    VARIANT_BOOL HasContinualStartSpeed;
    __declspec(property(get=GetHasContinualAcceleration))
    VARIANT_BOOL HasContinualAcceleration;

    //
    // Wrapper methods for error-handling
    //

    double GetMinContinualSpeed (
        _bstr_t unit );
    double GetMaxContinualSpeed (
        _bstr_t unit );
    double GetMinContinualStartSpeed (
        _bstr_t unit );
    double GetMaxContinualStartSpeed (
        _bstr_t unit );
    double GetMinContinualAcceleration (
        _bstr_t unit );
    double GetMaxContinualAcceleration (
        _bstr_t unit );
    double GetContinualSpeed (
        _bstr_t unit );
    VARIANT_BOOL SetContinualSpeed (
        double continualSpeed,
        _bstr_t unit );
    VARIANT_BOOL SetContinualSpeed_2 (
        _bstr_t clientID,
        double continualSpeed,
        _bstr_t unit );
    VARIANT_BOOL GetHasContinualStartSpeed ( );
    double GetContinualStartSpeed (
        _bstr_t unit );
    VARIANT_BOOL SetContinualStartSpeed (
        double continualSpeed,
        _bstr_t unit );
    VARIANT_BOOL SetContinualStartSpeed_2 (
        _bstr_t clientID,
        double continualSpeed,
        _bstr_t unit );
    VARIANT_BOOL GetHasContinualAcceleration ( );
    double GetContinualAcceleration (
        _bstr_t unit );
    VARIANT_BOOL SetContinualAcceleration (
        double continualAcceleration,
        _bstr_t unit );
    VARIANT_BOOL SetContinualAcceleration_2 (
        _bstr_t clientID,
        double continualAcceleration,
        _bstr_t unit );
    long GetContinualSpeedUnitCount ( );
    _bstr_t GetContinualSpeedUnit (
        long index );
    long GetContinualStartSpeedUnitCount ( );
    _bstr_t GetContinualStartSpeedUnit (
        long index );
    long GetContinualAccelerationUnitCount ( );
    _bstr_t GetContinualAccelerationUnit (
        long index );
    HRESULT add_MTBContinualSpeedChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBContinualSpeedChangedEvent (
        IUnknown * value );
    HRESULT add_MTBContinualStartSpeedChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBContinualStartSpeedChangedEvent (
        IUnknown * value );
    HRESULT add_MTBContinualAccelerationChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBContinualAccelerationChangedEvent (
        IUnknown * value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetMinContinualSpeed (
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetMaxContinualSpeed (
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetMinContinualStartSpeed (
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetMaxContinualStartSpeed (
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetMinContinualAcceleration (
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetMaxContinualAcceleration (
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetContinualSpeed (
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetContinualSpeed (
        /*[in]*/ double continualSpeed,
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetContinualSpeed_2 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ double continualSpeed,
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HasContinualStartSpeed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetContinualStartSpeed (
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetContinualStartSpeed (
        /*[in]*/ double continualSpeed,
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetContinualStartSpeed_2 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ double continualSpeed,
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HasContinualAcceleration (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetContinualAcceleration (
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetContinualAcceleration (
        /*[in]*/ double continualAcceleration,
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetContinualAcceleration_2 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ double continualAcceleration,
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetContinualSpeedUnitCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetContinualSpeedUnit (
        /*[in]*/ long index,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetContinualStartSpeedUnitCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetContinualStartSpeedUnit (
        /*[in]*/ long index,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetContinualAccelerationUnitCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetContinualAccelerationUnit (
        /*[in]*/ long index,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_add_MTBContinualSpeedChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBContinualSpeedChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBContinualStartSpeedChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBContinualStartSpeedChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBContinualAccelerationChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBContinualAccelerationChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
};

struct __declspec(uuid("ece98725-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBContinualSpeedEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT MTBContinualSpeedChangedEvent (
        struct _Hashtable * speeds );
    HRESULT MTBContinualStartSpeedChangedEvent (
        struct _Hashtable * speeds );
    HRESULT MTBContinualAccelerationChangedEvent (
        struct _Hashtable * accelerations );
};

struct __declspec(uuid("ece9875c-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBApoTomeEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT MTBOperationStateChangedEvent (
        enum MTBApoTomeOperationState state );
    HRESULT MTBGridChangedEvent (
        VARIANT_BOOL Grid );
};

struct __declspec(uuid("ece9875d-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBApoTomeServo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMaxTriggerPositionListEntries))
    long MaxTriggerPositionListEntries;

    //
    // Wrapper methods for error-handling
    //

    long GetMaxTriggerPositionListEntries ( );
    SAFEARRAY * GetTriggerPositionList (
        _bstr_t unit );
    VARIANT_BOOL SetTriggerPositionList (
        SAFEARRAY * list,
        _bstr_t unit );
    VARIANT_BOOL SetTriggerPositionList_2 (
        _bstr_t clientID,
        SAFEARRAY * list,
        _bstr_t unit );
    long GetTriggerPositionListPointer ( );
    VARIANT_BOOL SetTriggerPositionListPointer (
        long pointer );
    VARIANT_BOOL SetTriggerPositionListPointer_2 (
        _bstr_t clientID,
        long pointer );
    HRESULT add_MTBTriggerPositionListChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBTriggerPositionListChangedEvent (
        IUnknown * value );
    HRESULT add_MTBTriggerPositionListPointerChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBTriggerPositionListPointerChangedEvent (
        IUnknown * value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MaxTriggerPositionListEntries (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetTriggerPositionList (
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetTriggerPositionList (
        /*[in]*/ SAFEARRAY * list,
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetTriggerPositionList_2 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ SAFEARRAY * list,
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetTriggerPositionListPointer (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetTriggerPositionListPointer (
        /*[in]*/ long pointer,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetTriggerPositionListPointer_2 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ long pointer,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_add_MTBTriggerPositionListChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBTriggerPositionListChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBTriggerPositionListPointerChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBTriggerPositionListPointerChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
};

struct __declspec(uuid("ece9875e-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBApoTomeServoEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT MTBTriggerPositionListChangedEvent ( );
    HRESULT MTBTriggerPositionListPointerChangedEvent (
        long pointer );
};

struct __declspec(uuid("ece98760-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBApoTomePhase : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT GetPhaseWobble (
        long * speed,
        double * MinPosition,
        double * MaxPosition );
    VARIANT_BOOL SetPhaseWobble (
        long speed,
        double MinPosition,
        double MaxPosition );
    VARIANT_BOOL SetPhaseWobble_2 (
        _bstr_t clientID,
        long speed,
        double MinPosition,
        double MaxPosition );
    HRESULT add_MTBPhaseWobbleChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBPhaseWobbleChangedEvent (
        IUnknown * value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetPhaseWobble (
        /*[out]*/ long * speed,
        /*[out]*/ double * MinPosition,
        /*[out]*/ double * MaxPosition ) = 0;
      virtual HRESULT __stdcall raw_SetPhaseWobble (
        /*[in]*/ long speed,
        /*[in]*/ double MinPosition,
        /*[in]*/ double MaxPosition,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetPhaseWobble_2 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ long speed,
        /*[in]*/ double MinPosition,
        /*[in]*/ double MaxPosition,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_add_MTBPhaseWobbleChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBPhaseWobbleChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
};

struct __declspec(uuid("ece98761-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBApoTomePhaseEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT MTBPhaseWobbleChangedEvent (
        long speed,
        double MinPosition,
        double MaxPosition );
};

struct __declspec(uuid("ece9875f-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBApoTomeFocus : IDispatch
{};

struct __declspec(uuid("ece98758-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBApoTome : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOperationState))
    enum MTBApoTomeOperationState OperationState;
    __declspec(property(get=GetPhase))
    IMTBApoTomePhasePtr Phase;
    __declspec(property(get=GetFocus))
    IMTBApoTomeFocusPtr Focus;
    __declspec(property(get=GetHasGridRecognition))
    VARIANT_BOOL HasGridRecognition;
    __declspec(property(get=GetGrid))
    double Grid;
    __declspec(property(get=GetHasTrigger))
    VARIANT_BOOL HasTrigger;

    //
    // Wrapper methods for error-handling
    //

    enum MTBApoTomeOperationState GetOperationState ( );
    IMTBApoTomePhasePtr GetPhase ( );
    IMTBApoTomeFocusPtr GetFocus ( );
    VARIANT_BOOL SWTrigger ( );
    VARIANT_BOOL SWTrigger_2 (
        _bstr_t clientID );
    VARIANT_BOOL GetHasGridRecognition ( );
    double GetGrid ( );
    HRESULT GetHWTriggerProperties (
        long * channel,
        enum MTBApoTomeHWTriggerCondition * condition );
    VARIANT_BOOL SetHWTriggerProperties (
        long channel,
        enum MTBApoTomeHWTriggerCondition condition );
    VARIANT_BOOL SetHWTriggerProperties_2 (
        _bstr_t clientID,
        long channel,
        enum MTBApoTomeHWTriggerCondition condition );
    HRESULT add_MTBOperationStateChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBOperationStateChangedEvent (
        IUnknown * value );
    HRESULT add_MTBGridChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBGridChangedEvent (
        IUnknown * value );
    VARIANT_BOOL GetHasTrigger ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_OperationState (
        /*[out,retval]*/ enum MTBApoTomeOperationState * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Phase (
        /*[out,retval]*/ struct IMTBApoTomePhase * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Focus (
        /*[out,retval]*/ struct IMTBApoTomeFocus * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SWTrigger (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SWTrigger_2 (
        /*[in]*/ BSTR clientID,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HasGridRecognition (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Grid (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetHWTriggerProperties (
        /*[out]*/ long * channel,
        /*[out]*/ enum MTBApoTomeHWTriggerCondition * condition ) = 0;
      virtual HRESULT __stdcall raw_SetHWTriggerProperties (
        /*[in]*/ long channel,
        /*[in]*/ enum MTBApoTomeHWTriggerCondition condition,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetHWTriggerProperties_2 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ long channel,
        /*[in]*/ enum MTBApoTomeHWTriggerCondition condition,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_add_MTBOperationStateChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBOperationStateChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBGridChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBGridChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall get_HasTrigger (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("ece987cc-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBApoTomeGridChanger : IDispatch
{};

struct __declspec(uuid("ece98731-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBAxis : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHasOnOff))
    VARIANT_BOOL HasOnOff;
    __declspec(property(get=GetCalibrationModes))
    enum MTBCalibrationModes CalibrationModes;
    __declspec(property(get=GetCalibrationMode))
    enum MTBCalibrationModes CalibrationMode;
    __declspec(property(get=GetHasLoadWork))
    VARIANT_BOOL HasLoadWork;
    __declspec(property(get=GetClosedLoop))
    enum MTBOnOff ClosedLoop;
    __declspec(property(get=GetHasSWLimit))
    enum MTBLimits HasSWLimit;
    __declspec(property(get=GetTrigger))
    IMTBAxisTriggerPtr Trigger;
    __declspec(property(get=GetIsOnSWLimit))
    enum MTBLimits IsOnSWLimit;
    __declspec(property(get=GetCoordinateDirection))
    enum MTBDirection CoordinateDirection;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetHasOnOff ( );
    VARIANT_BOOL SetOnOff (
        enum MTBOnOff onOff );
    VARIANT_BOOL SetOnOff_2 (
        _bstr_t clientID,
        enum MTBOnOff onOff );
    enum MTBOnOff GetOnOff ( );
    enum MTBCalibrationModes GetCalibrationModes ( );
    enum MTBCalibrationModes GetCalibrationMode ( );
    VARIANT_BOOL Calibrate (
        enum MTBCalibrationModes calMode,
        enum MTBCmdSetModes cmdMode,
        long timeout );
    VARIANT_BOOL Calibrate_2 (
        enum MTBCalibrationModes calMode,
        enum MTBCmdSetModes cmdMode );
    VARIANT_BOOL Calibrate_3 (
        _bstr_t clientID,
        enum MTBCalibrationModes calMode,
        enum MTBCmdSetModes cmdMode,
        long timeout );
    VARIANT_BOOL Calibrate_4 (
        _bstr_t clientID,
        enum MTBCalibrationModes calMode,
        enum MTBCmdSetModes cmdMode );
    VARIANT_BOOL GetHasLoadWork ( );
    VARIANT_BOOL SetLoadWork (
        enum MTBLoadWorkPosition lwType,
        enum MTBCmdSetModes mode,
        long timeout );
    VARIANT_BOOL SetLoadWork_2 (
        enum MTBLoadWorkPosition lwType,
        enum MTBCmdSetModes mode );
    VARIANT_BOOL SetLoadWork_3 (
        _bstr_t clientID,
        enum MTBLoadWorkPosition lwType,
        enum MTBCmdSetModes mode,
        long timeout );
    VARIANT_BOOL SetLoadWork_4 (
        _bstr_t clientID,
        enum MTBLoadWorkPosition lwType,
        enum MTBCmdSetModes mode );
    enum MTBLoadWorkPosition GetLoadWork ( );
    enum MTBLimits GetHasSWLimit ( );
    VARIANT_BOOL SetSWLimit (
        VARIANT_BOOL upper,
        double limit,
        _bstr_t unit );
    VARIANT_BOOL SetSWLimit_2 (
        _bstr_t clientID,
        VARIANT_BOOL upper,
        double limit,
        _bstr_t unit );
    double GetSWLimit (
        VARIANT_BOOL upper,
        _bstr_t unit );
    enum MTBLimits GetIsOnSWLimit ( );
    VARIANT_BOOL EnableSWLimit (
        VARIANT_BOOL upper,
        VARIANT_BOOL enable );
    VARIANT_BOOL EnableSWLimit_2 (
        _bstr_t clientID,
        VARIANT_BOOL upper,
        VARIANT_BOOL enable );
    VARIANT_BOOL IsSWLimitEnabled (
        VARIANT_BOOL upper );
    VARIANT_BOOL SetMeasurementPosition (
        double Position,
        _bstr_t unit );
    VARIANT_BOOL SetMeasurementPosition_2 (
        _bstr_t clientID,
        double Position,
        _bstr_t unit );
    double GetMeasurementPosition (
        _bstr_t unit );
    VARIANT_BOOL SetMeasurementOrigin (
        double origin,
        _bstr_t unit );
    VARIANT_BOOL SetMeasurementOrigin_2 (
        _bstr_t clientID,
        double origin,
        _bstr_t unit );
    double GetMeasurementOrigin (
        _bstr_t unit );
    enum MTBDirection GetCoordinateDirection ( );
    HRESULT add_MTBOnOffChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBOnOffChangedEvent (
        IUnknown * value );
    HRESULT add_MTBLoadWorkChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBLoadWorkChangedEvent (
        IUnknown * value );
    HRESULT add_MTBSWLimitReachedEvent (
        IUnknown * value );
    HRESULT remove_MTBSWLimitReachedEvent (
        IUnknown * value );
    HRESULT add_MTBSWLimitChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBSWLimitChangedEvent (
        IUnknown * value );
    HRESULT add_MTBSWLimitEnabledEvent (
        IUnknown * value );
    HRESULT remove_MTBSWLimitEnabledEvent (
        IUnknown * value );
    HRESULT add_MTBCalibrationChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBCalibrationChangedEvent (
        IUnknown * value );
    HRESULT add_MTBMeasurementOriginChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBMeasurementOriginChangedEvent (
        IUnknown * value );
    HRESULT add_MTBMeasurementPositionChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBMeasurementPositionChangedEvent (
        IUnknown * value );
    enum MTBOnOff GetClosedLoop ( );
    HRESULT add_MTBClosedLoopChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBClosedLoopChangedEvent (
        IUnknown * value );
    IMTBAxisTriggerPtr GetTrigger ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_HasOnOff (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetOnOff (
        /*[in]*/ enum MTBOnOff onOff,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetOnOff_2 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ enum MTBOnOff onOff,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetOnOff (
        /*[out,retval]*/ enum MTBOnOff * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CalibrationModes (
        /*[out,retval]*/ enum MTBCalibrationModes * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CalibrationMode (
        /*[out,retval]*/ enum MTBCalibrationModes * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Calibrate (
        /*[in]*/ enum MTBCalibrationModes calMode,
        /*[in]*/ enum MTBCmdSetModes cmdMode,
        /*[in]*/ long timeout,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Calibrate_2 (
        /*[in]*/ enum MTBCalibrationModes calMode,
        /*[in]*/ enum MTBCmdSetModes cmdMode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Calibrate_3 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ enum MTBCalibrationModes calMode,
        /*[in]*/ enum MTBCmdSetModes cmdMode,
        /*[in]*/ long timeout,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Calibrate_4 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ enum MTBCalibrationModes calMode,
        /*[in]*/ enum MTBCmdSetModes cmdMode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HasLoadWork (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetLoadWork (
        /*[in]*/ enum MTBLoadWorkPosition lwType,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[in]*/ long timeout,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetLoadWork_2 (
        /*[in]*/ enum MTBLoadWorkPosition lwType,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetLoadWork_3 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ enum MTBLoadWorkPosition lwType,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[in]*/ long timeout,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetLoadWork_4 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ enum MTBLoadWorkPosition lwType,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetLoadWork (
        /*[out,retval]*/ enum MTBLoadWorkPosition * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HasSWLimit (
        /*[out,retval]*/ enum MTBLimits * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetSWLimit (
        /*[in]*/ VARIANT_BOOL upper,
        /*[in]*/ double limit,
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetSWLimit_2 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ VARIANT_BOOL upper,
        /*[in]*/ double limit,
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetSWLimit (
        /*[in]*/ VARIANT_BOOL upper,
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsOnSWLimit (
        /*[out,retval]*/ enum MTBLimits * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_EnableSWLimit (
        /*[in]*/ VARIANT_BOOL upper,
        /*[in]*/ VARIANT_BOOL enable,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_EnableSWLimit_2 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ VARIANT_BOOL upper,
        /*[in]*/ VARIANT_BOOL enable,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsSWLimitEnabled (
        /*[in]*/ VARIANT_BOOL upper,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetMeasurementPosition (
        /*[in]*/ double Position,
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetMeasurementPosition_2 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ double Position,
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetMeasurementPosition (
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetMeasurementOrigin (
        /*[in]*/ double origin,
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetMeasurementOrigin_2 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ double origin,
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetMeasurementOrigin (
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoordinateDirection (
        /*[out,retval]*/ enum MTBDirection * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_add_MTBOnOffChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBOnOffChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBLoadWorkChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBLoadWorkChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBSWLimitReachedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBSWLimitReachedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBSWLimitChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBSWLimitChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBSWLimitEnabledEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBSWLimitEnabledEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBCalibrationChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBCalibrationChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBMeasurementOriginChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBMeasurementOriginChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBMeasurementPositionChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBMeasurementPositionChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall get_ClosedLoop (
        /*[out,retval]*/ enum MTBOnOff * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_add_MTBClosedLoopChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBClosedLoopChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall get_Trigger (
        /*[out,retval]*/ struct IMTBAxisTrigger * * pRetVal ) = 0;
};

struct __declspec(uuid("ece98734-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBAxisEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT MTBOnOffChangedEvent (
        enum MTBOnOff onOff );
    HRESULT MTBLoadWorkChangedEvent (
        enum MTBLoadWorkPosition lwType );
    HRESULT MTBSWLimitReachedEvent (
        VARIANT_BOOL state,
        enum MTBLimits limit );
    HRESULT MTBSWLimitChangedEvent (
        VARIANT_BOOL upper,
        double limit );
    HRESULT MTBCalibrationChangedEvent (
        enum MTBCalibrationModes mode );
    HRESULT MTBMeasurementOriginChangedEvent (
        struct _Hashtable * origins );
    HRESULT MTBMeasurementPositionChangedEvent (
        struct _Hashtable * positions );
    HRESULT MTBSWLimitEnabledEvent (
        VARIANT_BOOL upper,
        VARIANT_BOOL enable );
    HRESULT MTBClosedLoopChangedEvent (
        enum MTBOnOff onOff );
};

struct __declspec(uuid("ece9873a-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBStageEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT MTBPositionSettledEvent (
        struct _Hashtable * xPositions,
        struct _Hashtable * yPositions );
};

struct __declspec(uuid("ece98766-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBStageAxis : IDispatch
{};

struct __declspec(uuid("ece98717-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBStage : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetXAxis))
    IMTBStageAxisPtr XAxis;
    __declspec(property(get=GetYAxis))
    IMTBStageAxisPtr YAxis;

    //
    // Wrapper methods for error-handling
    //

    IMTBStageAxisPtr GetXAxis ( );
    IMTBStageAxisPtr GetYAxis ( );
    HRESULT GetPosition (
        double * xPosition,
        double * yPosition,
        _bstr_t unit );
    VARIANT_BOOL SetPosition (
        double xPosition,
        double yPosition,
        _bstr_t unit,
        enum MTBCmdSetModes mode,
        long timeout );
    VARIANT_BOOL SetPosition_2 (
        double xPosition,
        double yPosition,
        _bstr_t unit,
        enum MTBCmdSetModes mode );
    VARIANT_BOOL SetPosition_3 (
        _bstr_t clientID,
        double xPosition,
        double yPosition,
        _bstr_t unit,
        enum MTBCmdSetModes mode,
        long timeout );
    VARIANT_BOOL SetPosition_4 (
        _bstr_t clientID,
        double xPosition,
        double yPosition,
        _bstr_t unit,
        enum MTBCmdSetModes mode );
    VARIANT_BOOL Move (
        double xMoveSpeed,
        double yMoveSpeed,
        _bstr_t unit );
    VARIANT_BOOL Move_2 (
        _bstr_t clientID,
        double xMoveSpeed,
        double yMoveSpeed,
        _bstr_t unit );
    VARIANT_BOOL Stop ( );
    VARIANT_BOOL Stop_2 (
        _bstr_t clientID );
    double GetMeasurementDistance (
        _bstr_t unit );
    HRESULT add_MTBPositionSettledEvent (
        IUnknown * value );
    HRESULT remove_MTBPositionSettledEvent (
        IUnknown * value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_XAxis (
        /*[out,retval]*/ struct IMTBStageAxis * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_YAxis (
        /*[out,retval]*/ struct IMTBStageAxis * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetPosition (
        /*[out]*/ double * xPosition,
        /*[out]*/ double * yPosition,
        /*[in]*/ BSTR unit ) = 0;
      virtual HRESULT __stdcall raw_SetPosition (
        /*[in]*/ double xPosition,
        /*[in]*/ double yPosition,
        /*[in]*/ BSTR unit,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[in]*/ long timeout,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetPosition_2 (
        /*[in]*/ double xPosition,
        /*[in]*/ double yPosition,
        /*[in]*/ BSTR unit,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetPosition_3 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ double xPosition,
        /*[in]*/ double yPosition,
        /*[in]*/ BSTR unit,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[in]*/ long timeout,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetPosition_4 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ double xPosition,
        /*[in]*/ double yPosition,
        /*[in]*/ BSTR unit,
        /*[in]*/ enum MTBCmdSetModes mode,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double xMoveSpeed,
        /*[in]*/ double yMoveSpeed,
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Move_2 (
        /*[in]*/ BSTR clientID,
        /*[in]*/ double xMoveSpeed,
        /*[in]*/ double yMoveSpeed,
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Stop (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Stop_2 (
        /*[in]*/ BSTR clientID,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetMeasurementDistance (
        /*[in]*/ BSTR unit,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_add_MTBPositionSettledEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBPositionSettledEvent (
        /*[in]*/ IUnknown * value ) = 0;
};

struct __declspec(uuid("ece98739-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBFocus : IDispatch
{};

struct __declspec(uuid("ece987df-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBCameraInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCameraID))
    _bstr_t CameraID;
    __declspec(property(get=GetCameraName))
    _bstr_t CameraName;
    __declspec(property(get=GetTriggerSetting))
    _bstr_t TriggerSetting;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetCameraID ( );
    _bstr_t GetCameraName ( );
    _bstr_t GetTriggerSetting ( );
    HRESULT add_MTBCameraInfoChangedEvent (
        IUnknown * value );
    HRESULT remove_MTBCameraInfoChangedEvent (
        IUnknown * value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CameraID (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CameraName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TriggerSetting (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_add_MTBCameraInfoChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBCameraInfoChangedEvent (
        /*[in]*/ IUnknown * value ) = 0;
};

struct __declspec(uuid("ece987e0-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBCameraInfoEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT MTBCameraInfoChangedEvent ( );
};

struct __declspec(uuid("ece9871a-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBEventSink : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetclientID,put=PutclientID))
    _bstr_t clientID;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Advise (
        const _variant_t & toAdvise );
    HRESULT Unadvise (
        const _variant_t & toUnadvise );
    _bstr_t GetclientID ( );
    void PutclientID (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Advise (
        /*[in]*/ VARIANT toAdvise ) = 0;
      virtual HRESULT __stdcall raw_Unadvise (
        /*[in]*/ VARIANT toUnadvise ) = 0;
      virtual HRESULT __stdcall get_clientID (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_clientID (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("ece9877c-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBEventSink;
    // interface _Object
    // [ default ] interface IMTBEventSink

struct __declspec(uuid("ece9871c-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBBaseEventSink;
    // interface _Object
    // [ default ] interface IMTBEventSink
    // [ default, source ] dispinterface IMTBBaseEvents

struct __declspec(uuid("ece9871b-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBRootEventSink;
    // interface _Object
    // [ default ] interface IMTBEventSink
    // [ default, source ] dispinterface IMTBRootEvents

struct __declspec(uuid("ece9871d-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBChangerEventSink;
    // interface _Object
    // [ default ] interface IMTBEventSink
    // [ default, source ] dispinterface IMTBChangerEvents

struct __declspec(uuid("ece9871f-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBObjectiveChangerEventSink;
    // interface _Object
    // [ default ] interface IMTBEventSink
    // [ default, source ] dispinterface IMTBObjectiveChangerEvents

struct __declspec(uuid("ece9873d-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBConnectionEventSink;
    // interface _Object
    // [ default ] interface IMTBEventSink
    // [ default, source ] dispinterface IMTBConnectionEvents

struct __declspec(uuid("ece987aa-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBConfigurationEventSink;
    // interface _Object
    // [ default ] interface IMTBEventSink
    // [ default, source ] dispinterface IMTBConfigurationEvents

struct __declspec(uuid("ece98723-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBContinualEventSink;
    // interface _Object
    // [ default ] interface IMTBEventSink
    // [ default, source ] dispinterface IMTBContinualEvents

struct __declspec(uuid("ece98738-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBMoveEventSink;
    // interface _Object
    // [ default ] interface IMTBEventSink
    // [ default, source ] dispinterface IMTBMoveEvents

struct __declspec(uuid("ece98726-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBContinualSpeedEventSink;
    // interface _Object
    // [ default ] interface IMTBEventSink
    // [ default, source ] dispinterface IMTBContinualSpeedEvents

struct __declspec(uuid("ece9872a-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBLampEventSink;
    // interface _Object
    // [ default ] interface IMTBEventSink
    // [ default, source ] dispinterface IMTBLampEvents

struct __declspec(uuid("ece98777-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBFluorescenceLampEventSink;
    // interface _Object
    // [ default ] interface IMTBEventSink
    // [ default, source ] dispinterface IMTBFluorescenceLampEvents

struct __declspec(uuid("ece98735-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBAxisEventSink;
    // interface _Object
    // [ default ] interface IMTBEventSink
    // [ default, source ] dispinterface IMTBAxisEvents

struct __declspec(uuid("ece9873b-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBStageEventSink;
    // interface _Object
    // [ default ] interface IMTBEventSink
    // [ default, source ] dispinterface IMTBStageEvents

struct __declspec(uuid("ece98751-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBMagnificationPortEventSink;
    // interface _Object
    // [ default ] interface IMTBEventSink
    // [ default, source ] dispinterface IMTBMagnificationPortEvents

struct __declspec(uuid("ece98752-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBEyepieceEventSink;
    // interface _Object
    // [ default ] interface IMTBEventSink
    // [ default, source ] dispinterface IMTBEyepieceEvents

struct __declspec(uuid("ece98757-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBMicroscopeManagerEventSink;
    // interface _Object
    // [ default ] interface IMTBEventSink
    // [ default, source ] dispinterface IMTBMicroscopeManagerEvents

struct __declspec(uuid("ece98762-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBApoTomeEventSink;
    // interface _Object
    // [ default ] interface IMTBEventSink
    // [ default, source ] dispinterface IMTBApoTomeEvents

struct __declspec(uuid("ece98763-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBApoTomeServoEventSink;
    // interface _Object
    // [ default ] interface IMTBEventSink
    // [ default, source ] dispinterface IMTBApoTomeServoEvents

struct __declspec(uuid("ece98764-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBApoTomePhaseEventSink;
    // interface _Object
    // [ default ] interface IMTBEventSink
    // [ default, source ] dispinterface IMTBApoTomePhaseEvents

struct __declspec(uuid("ece98772-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBCoupledZoomEventSink;
    // interface _Object
    // [ default ] interface IMTBEventSink
    // [ default, source ] dispinterface IMTBCoupledZoomEvents

struct __declspec(uuid("ece98788-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBKeyFunctionsEventSink;
    // interface _Object
    // [ default ] interface IMTBEventSink
    // [ default, source ] dispinterface IMTBKeyFunctionsEvents

struct __declspec(uuid("ece98798-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBIncubationSensorEventSink;
    // interface _Object
    // [ default ] interface IMTBEventSink
    // [ default, source ] dispinterface IMTBIncubationSensorEvents

struct __declspec(uuid("ece98799-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBIncubationChannelEventSink;
    // interface _Object
    // [ default ] interface IMTBEventSink
    // [ default, source ] dispinterface IMTBIncubationChannelEvents

struct __declspec(uuid("ece9879a-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBIncubationCO2ChannelEventSink;
    // interface _Object
    // [ default ] interface IMTBEventSink
    // [ default, source ] dispinterface IMTBIncubationCO2ChannelEvents

struct __declspec(uuid("ece987ad-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBIncubationCirculatorChannelEventSink;
    // interface _Object
    // [ default ] interface IMTBEventSink
    // [ default, source ] dispinterface IMTBIncubationCirculatorChannelEvents

struct __declspec(uuid("ece987af-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBFluorescenceLEDEventSink;
    // interface _Object
    // [ default ] interface IMTBEventSink
    // [ default, source ] dispinterface IMTBFluorescenceLEDEvents

struct __declspec(uuid("ece987a3-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBFluorescenceLEDControlEventSink;
    // interface _Object
    // [ default ] interface IMTBEventSink
    // [ default, source ] dispinterface IMTBFluorescenceLEDControlEvents

struct __declspec(uuid("ece987a7-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBFluorescenceLEDShutterEventSink;
    // interface _Object
    // [ default ] interface IMTBEventSink
    // [ default, source ] dispinterface IMTBFluorescenceLEDShutterEvents

struct __declspec(uuid("ece987b4-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBFocusStabilizerEventSink;
    // interface _Object
    // [ default ] interface IMTBEventSink
    // [ default, source ] dispinterface IMTBFocusStabilizerEvents

struct __declspec(uuid("ece987c0-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBAxisTriggerEventSink;
    // interface _Object
    // [ default ] interface IMTBEventSink
    // [ default, source ] dispinterface IMTBAxisTriggerEvents

struct __declspec(uuid("ece987c9-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBCSUSpinningDiskEventSink;
    // interface _Object
    // [ default ] interface IMTBEventSink
    // [ default, source ] dispinterface IMTBCSUSpinningDiskEvents

struct __declspec(uuid("ece987e6-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBMDSControllerEventSink;
    // interface _Object
    // [ default ] interface IMTBEventSink
    // [ default, source ] dispinterface IMTBMDSControllerEvents

struct __declspec(uuid("ece987d7-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBMultiChannelAOTFEventSink;
    // interface _Object
    // [ default ] interface IMTBEventSink
    // [ default, source ] dispinterface IMTBMultiChannelAOTFEvents

struct __declspec(uuid("ece987d8-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBLaserLineEventSink;
    // interface _Object
    // [ default ] interface IMTBEventSink
    // [ default, source ] dispinterface IMTBLaserLineEvents

struct __declspec(uuid("ece987e1-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBCameraInfoEventSink;
    // interface _Object
    // [ default ] interface IMTBEventSink
    // [ default, source ] dispinterface IMTBCameraInfoEvents

struct __declspec(uuid("ece98785-4e0e-42eb-8a82-0b8771a2c3ca"))
MTBZoomEventSink;
    // interface _Object
    // [ default ] interface IMTBEventSink
    // [ default, source ] dispinterface IMTBZoomEvents

struct __declspec(uuid("ece98714-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBConnection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetID))
    _bstr_t ID;
    __declspec(property(get=GetMTBVersion))
    _bstr_t MTBVersion;
    __declspec(property(get=GetAvailableAssemblies))
    _bstr_t AvailableAssemblies;
    __declspec(property(get=GetLoadedAssemblies))
    _bstr_t LoadedAssemblies;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetID ( );
    HRESULT Login (
        _bstr_t culture,
        BSTR * ID );
    HRESULT Logout (
        _bstr_t ID );
    HRESULT Init (
        _bstr_t ID );
    IMTBRootPtr GetRoot (
        _bstr_t ID );
    IMTBConfigurationPtr GetConfiguration (
        _bstr_t ID );
    IMTBFwSettingsPtr GetFwSettings (
        _bstr_t ID );
    _bstr_t GetMTBVersion ( );
    _bstr_t GetAvailableAssemblies ( );
    _bstr_t GetLoadedAssemblies ( );
    HRESULT add_MTBConnectionPossibleEvent (
        IUnknown * value );
    HRESULT remove_MTBConnectionPossibleEvent (
        IUnknown * value );
    HRESULT add_MTBConfigMismatchEvent (
        IUnknown * value );
    HRESULT remove_MTBConfigMismatchEvent (
        IUnknown * value );
    HRESULT Close ( );
    IMTBUtilPtr GetUtil (
        _bstr_t ID );
    IUnknownPtr GetMTBMonitor (
        _bstr_t ID );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ID (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Login (
        /*[in]*/ BSTR culture,
        /*[out]*/ BSTR * ID ) = 0;
      virtual HRESULT __stdcall raw_Logout (
        /*[in]*/ BSTR ID ) = 0;
      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ BSTR ID ) = 0;
      virtual HRESULT __stdcall raw_GetRoot (
        /*[in]*/ BSTR ID,
        /*[out,retval]*/ struct IMTBRoot * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetConfiguration (
        /*[in]*/ BSTR ID,
        /*[out,retval]*/ struct IMTBConfiguration * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetFwSettings (
        /*[in]*/ BSTR ID,
        /*[out,retval]*/ struct IMTBFwSettings * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MTBVersion (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AvailableAssemblies (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LoadedAssemblies (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_add_MTBConnectionPossibleEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBConnectionPossibleEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_add_MTBConfigMismatchEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBConfigMismatchEvent (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_Close ( ) = 0;
      virtual HRESULT __stdcall raw_GetUtil (
        /*[in]*/ BSTR ID,
        /*[out,retval]*/ struct IMTBUtil * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetMTBMonitor (
        /*[in]*/ BSTR ID,
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
};

struct __declspec(uuid("ece98712-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBComponent : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetID))
    _bstr_t ID;
    __declspec(property(get=GetSyncTimeout))
    long SyncTimeout;
    __declspec(property(get=GetMotorization))
    enum MTBMotorization Motorization;
    __declspec(property(get=GetObservationPathNode))
    IMTBLightPathNodePtr ObservationPathNode;
    __declspec(property(get=GetTransmittedLightPathNode))
    IMTBLightPathNodePtr TransmittedLightPathNode;
    __declspec(property(get=GetReflectedLightPathNode))
    IMTBLightPathNodePtr ReflectedLightPathNode;
    __declspec(property(get=GetAccessibility))
    enum MTBAccessibility Accessibility;

    //
    // Wrapper methods for error-handling
    //

    IMTBDevicePtr GetDevice ( );
    _bstr_t GetID ( );
    long GetSyncTimeout ( );
    enum MTBMotorization GetMotorization ( );
    IMTBLightPathNodePtr GetObservationPathNode ( );
    IMTBLightPathNodePtr GetTransmittedLightPathNode ( );
    IMTBLightPathNodePtr GetReflectedLightPathNode ( );
    enum MTBCmdSetModes AvailableCmdSetModes (
        _bstr_t functionName );
    enum MTBAccessibility GetAccessibility ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetDevice (
        /*[out,retval]*/ struct IMTBDevice * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ID (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SyncTimeout (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Motorization (
        /*[out,retval]*/ enum MTBMotorization * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObservationPathNode (
        /*[out,retval]*/ struct IMTBLightPathNode * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TransmittedLightPathNode (
        /*[out,retval]*/ struct IMTBLightPathNode * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReflectedLightPathNode (
        /*[out,retval]*/ struct IMTBLightPathNode * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AvailableCmdSetModes (
        /*[in]*/ BSTR functionName,
        /*[out,retval]*/ enum MTBCmdSetModes * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Accessibility (
        /*[out,retval]*/ enum MTBAccessibility * pRetVal ) = 0;
};

struct __declspec(uuid("ece9874d-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBLightPathNode : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPredecessor))
    IMTBComponentPtr Predecessor;
    __declspec(property(get=GetSuccessors))
    SAFEARRAY * Successors;

    //
    // Wrapper methods for error-handling
    //

    IMTBComponentPtr GetPredecessor ( );
    SAFEARRAY * GetSuccessors ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Predecessor (
        /*[out,retval]*/ struct IMTBComponent * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Successors (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
};

struct __declspec(uuid("ece98711-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBDevice : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsExternal))
    VARIANT_BOOL IsExternal;
    __declspec(property(get=GetServerName))
    _bstr_t ServerName;
    __declspec(property(get=GetAccessibility))
    enum MTBAccessibility Accessibility;

    //
    // Wrapper methods for error-handling
    //

    IMTBRootPtr GetRoot ( );
    IMTBComponentPtr GetComponent (
        _bstr_t ID );
    long GetComponentCount ( );
    IMTBComponentPtr GetComponent_2 (
        long index );
    VARIANT_BOOL GetIsExternal ( );
    _bstr_t GetServerName ( );
    VARIANT_BOOL SendRead (
        _bstr_t message,
        BSTR * answer );
    VARIANT_BOOL Send (
        _bstr_t message );
    enum MTBAccessibility GetAccessibility ( );
    IMTBComponentPtr GetComponentFullConfig (
        _bstr_t ID );
    long GetComponentCountFullConfig ( );
    IMTBComponentPtr GetComponentFullConfig_2 (
        long index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetRoot (
        /*[out,retval]*/ struct IMTBRoot * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetComponent (
        /*[in]*/ BSTR ID,
        /*[out,retval]*/ struct IMTBComponent * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetComponentCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetComponent_2 (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IMTBComponent * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsExternal (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ServerName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SendRead (
        /*[in]*/ BSTR message,
        /*[out]*/ BSTR * answer,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Send (
        /*[in]*/ BSTR message,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Accessibility (
        /*[out,retval]*/ enum MTBAccessibility * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetComponentFullConfig (
        /*[in]*/ BSTR ID,
        /*[out,retval]*/ struct IMTBComponent * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetComponentCountFullConfig (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetComponentFullConfig_2 (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IMTBComponent * * pRetVal ) = 0;
};

struct __declspec(uuid("ece98710-4e0e-42eb-8a82-0b8771a2c3ca"))
IMTBRoot : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    long GetDeviceCount ( );
    IMTBDevicePtr GetDevice (
        long n );
    IMTBComponentPtr GetComponent (
        _bstr_t ID );
    HRESULT add_MTBConfigChanged (
        IUnknown * value );
    HRESULT remove_MTBConfigChanged (
        IUnknown * value );
    long GetDeviceCountFullConfig ( );
    IMTBDevicePtr GetDeviceFullConfig (
        long index );
    IMTBComponentPtr GetComponentFullConfig (
        _bstr_t ID );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetDeviceCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetDevice (
        /*[in]*/ long n,
        /*[out,retval]*/ struct IMTBDevice * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetComponent (
        /*[in]*/ BSTR ID,
        /*[out,retval]*/ struct IMTBComponent * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_add_MTBConfigChanged (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_remove_MTBConfigChanged (
        /*[in]*/ IUnknown * value ) = 0;
      virtual HRESULT __stdcall raw_GetDeviceCountFullConfig (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetDeviceFullConfig (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IMTBDevice * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetComponentFullConfig (
        /*[in]*/ BSTR ID,
        /*[out,retval]*/ struct IMTBComponent * * pRetVal ) = 0;
};

//
// Named GUID constants initializations
//

extern "C" const GUID __declspec(selectany) LIBID_MTBApi =
    {0xece98769,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) DIID_IMTBConnectionEvents =
    {0xece9873c,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) CLSID_MTBConnection =
    {0xece98716,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) CLSID_UniqueRemotingIpcChannel =
    {0xece9879b,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBIdent =
    {0xece9870c,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBBase =
    {0xece9870e,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) DIID_IMTBChangerEvents =
    {0xece98704,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBObjectiveChanger =
    {0xece98705,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) DIID_IMTBObjectiveChangerEvents =
    {0xece9871e,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBReflectorChanger =
    {0xece98706,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBFilterChanger =
    {0xece98746,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBContrastChanger =
    {0xece98747,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBOptovarChanger =
    {0xece98748,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBLampChanger =
    {0xece98749,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBCondenserFrontLensChanger =
    {0xece9874a,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTB2TVVisualCameraChanger =
    {0xece9877f,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTB2TVCamerasChanger =
    {0xece98780,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBBaseportChanger =
    {0xece98781,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBSideportChanger =
    {0xece98782,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBRearportChanger =
    {0xece98789,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBObservationModeChanger =
    {0xece987b5,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBIncubationTemperatureSwitch =
    {0xece9878b,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBFluorescenceLEDShutter =
    {0xece987a5,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) DIID_IMTBFluorescenceLEDShutterEvents =
    {0xece987a6,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBApertureChanger =
    {0xece987cb,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBChangerElement =
    {0xece98707,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBReflectorWavelengthArea =
    {0xece9872f,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBOptovar =
    {0xece9873e,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBShutterState =
    {0xece9873f,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBFilter =
    {0xece98741,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBFrontLens =
    {0xece98742,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBMirror =
    {0xece98743,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBBeamSplitter =
    {0xece98744,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBColorBeamSplitterWavelengthArea =
    {0xece987de,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBColorBeamSplitter =
    {0xece9877e,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBComponentID =
    {0xece9878a,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBEmissionWavelengthArea =
    {0xece987c3,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBEmissionFilter =
    {0xece987c4,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBDichroicBeamSplitterWavelength =
    {0xece987c5,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBDichroicBeamSplitter =
    {0xece987c6,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBAperture =
    {0xece987ca,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBApoTomeGrid =
    {0xece987cd,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBExcitationWavelengthArea =
    {0xece987cf,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBExcitationFilter =
    {0xece987d0,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) DIID_IMTBCSUSpinningDiskEvents =
    {0xece987c8,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) DIID_IMTBCoupledZoomEvents =
    {0xece98771,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBMove =
    {0xece98724,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBServo =
    {0xece9872b,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBZoom =
    {0xece98773,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) DIID_IMTBZoomEvents =
    {0xece98784,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBCoupledZoomZoom =
    {0xece98774,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) DIID_IMTBLampEvents =
    {0xece98729,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBTLHalogenLamp =
    {0xece98778,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBRLHalogenLamp =
    {0xece98779,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) DIID_IMTBFluorescenceLampEvents =
    {0xece98776,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBFluorescenceLED =
    {0xece987ae,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) DIID_IMTBFluorescenceLEDEvents =
    {0xece987b0,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) DIID_IMTBFluorescenceLEDControlEvents =
    {0xece987a2,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBConfiguration =
    {0xece9870a,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) DIID_IMTBConfigurationEvents =
    {0xece987a9,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBFwSettings =
    {0xece9870b,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBBeamCombiner =
    {0xece987a4,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) DIID_IMTBMDSControllerEvents =
    {0xece987e5,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) DIID_IMTBMultiChannelAOTFEvents =
    {0xece987d3,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBLaserLine =
    {0xece987d4,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) DIID_IMTBLaserLineEvents =
    {0xece987d5,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBDescriptors =
    {0xece98713,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) DIID_IMTBAxisTriggerEvents =
    {0xece987bf,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) DIID_IMTBMicroscopeManagerEvents =
    {0xece98756,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBIncubationSensor =
    {0xece9878c,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) DIID_IMTBIncubationSensorEvents =
    {0xece98793,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) DIID_IMTBIncubationChannelEvents =
    {0xece98794,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBIncubationCalibrationSensor =
    {0xece9878e,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBIncubationHumiditySensor =
    {0xece9878f,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBIncubationTemperatureChannel =
    {0xece98790,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) DIID_IMTBIncubationCO2ChannelEvents =
    {0xece98795,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBIncubationAirHeaterChannel =
    {0xece98796,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBIncubationO2Channel =
    {0xece98797,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBIncubationCirculatorChannel =
    {0xece987ab,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) DIID_IMTBIncubationCirculatorChannelEvents =
    {0xece987ac,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) DIID_IMTBContinualEvents =
    {0xece98722,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) DIID_IMTBFocusStabilizerEvents =
    {0xece987b3,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBUtil =
    {0xece98783,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBKeyFunctions =
    {0xece98786,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) DIID_IMTBKeyFunctionsEvents =
    {0xece98787,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) DIID_IMTBRootEvents =
    {0xece9870d,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBObject =
    {0xece98753,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBPort =
    {0xece9874e,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBMagnificationPort =
    {0xece9877a,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) DIID_IMTBMagnificationPortEvents =
    {0xece9874f,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBCameraAdapter =
    {0xece987e2,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBEyepiece =
    {0xece9874c,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) DIID_IMTBEyepieceEvents =
    {0xece98750,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBDigiport =
    {0xece9877b,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBDoubleCameraAdapter =
    {0xece987ce,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) DIID_IMTBMoveEvents =
    {0xece98737,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) CLSID_MTBException =
    {0xece98719,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBRLTLSwitchState =
    {0xece98767,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBOnOffSwitchState =
    {0xece987c1,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBContrast =
    {0xece98740,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBObjective =
    {0xece987e3,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBChanger =
    {0xece98703,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBShutter =
    {0xece98745,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBContinual =
    {0xece98721,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBCSUSpinningDisk =
    {0xece987c7,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBCoupledZoom =
    {0xece98770,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBFluorescenceLamp =
    {0xece98775,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBIncubationChannel =
    {0xece9878d,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBBatchCommander =
    {0xece987dd,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBIncubationCO2Channel =
    {0xece98791,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBFluorescenceLEDControl =
    {0xece9879f,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBFocusStabilizer =
    {0xece987b2,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBObservationMode =
    {0xece987b6,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBAxisTrigger =
    {0xece987bd,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBMDSController =
    {0xece987e4,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBLamp =
    {0xece98728,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBMultiChannelAOTF =
    {0xece987d2,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBReflector =
    {0xece98709,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBMicroscopeManager =
    {0xece98755,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) DIID_IMTBBaseEvents =
    {0xece9870f,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBTirfAngularAdjust =
    {0xece987d1,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBContinualSpeed =
    {0xece98736,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) DIID_IMTBContinualSpeedEvents =
    {0xece98725,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) DIID_IMTBApoTomeEvents =
    {0xece9875c,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBApoTomeServo =
    {0xece9875d,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) DIID_IMTBApoTomeServoEvents =
    {0xece9875e,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBApoTomePhase =
    {0xece98760,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) DIID_IMTBApoTomePhaseEvents =
    {0xece98761,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBApoTomeFocus =
    {0xece9875f,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBApoTome =
    {0xece98758,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBApoTomeGridChanger =
    {0xece987cc,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBAxis =
    {0xece98731,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) DIID_IMTBAxisEvents =
    {0xece98734,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) DIID_IMTBStageEvents =
    {0xece9873a,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBStageAxis =
    {0xece98766,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBStage =
    {0xece98717,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBFocus =
    {0xece98739,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBCameraInfo =
    {0xece987df,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) DIID_IMTBCameraInfoEvents =
    {0xece987e0,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBEventSink =
    {0xece9871a,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) CLSID_MTBEventSink =
    {0xece9877c,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) CLSID_MTBBaseEventSink =
    {0xece9871c,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) CLSID_MTBRootEventSink =
    {0xece9871b,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) CLSID_MTBChangerEventSink =
    {0xece9871d,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) CLSID_MTBObjectiveChangerEventSink =
    {0xece9871f,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) CLSID_MTBConnectionEventSink =
    {0xece9873d,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) CLSID_MTBConfigurationEventSink =
    {0xece987aa,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) CLSID_MTBContinualEventSink =
    {0xece98723,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) CLSID_MTBMoveEventSink =
    {0xece98738,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) CLSID_MTBContinualSpeedEventSink =
    {0xece98726,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) CLSID_MTBLampEventSink =
    {0xece9872a,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) CLSID_MTBFluorescenceLampEventSink =
    {0xece98777,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) CLSID_MTBAxisEventSink =
    {0xece98735,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) CLSID_MTBStageEventSink =
    {0xece9873b,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) CLSID_MTBMagnificationPortEventSink =
    {0xece98751,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) CLSID_MTBEyepieceEventSink =
    {0xece98752,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) CLSID_MTBMicroscopeManagerEventSink =
    {0xece98757,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) CLSID_MTBApoTomeEventSink =
    {0xece98762,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) CLSID_MTBApoTomeServoEventSink =
    {0xece98763,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) CLSID_MTBApoTomePhaseEventSink =
    {0xece98764,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) CLSID_MTBCoupledZoomEventSink =
    {0xece98772,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) CLSID_MTBKeyFunctionsEventSink =
    {0xece98788,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) CLSID_MTBIncubationSensorEventSink =
    {0xece98798,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) CLSID_MTBIncubationChannelEventSink =
    {0xece98799,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) CLSID_MTBIncubationCO2ChannelEventSink =
    {0xece9879a,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) CLSID_MTBIncubationCirculatorChannelEventSink =
    {0xece987ad,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) CLSID_MTBFluorescenceLEDEventSink =
    {0xece987af,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) CLSID_MTBFluorescenceLEDControlEventSink =
    {0xece987a3,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) CLSID_MTBFluorescenceLEDShutterEventSink =
    {0xece987a7,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) CLSID_MTBFocusStabilizerEventSink =
    {0xece987b4,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) CLSID_MTBAxisTriggerEventSink =
    {0xece987c0,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) CLSID_MTBCSUSpinningDiskEventSink =
    {0xece987c9,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) CLSID_MTBMDSControllerEventSink =
    {0xece987e6,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) CLSID_MTBMultiChannelAOTFEventSink =
    {0xece987d7,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) CLSID_MTBLaserLineEventSink =
    {0xece987d8,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) CLSID_MTBCameraInfoEventSink =
    {0xece987e1,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) CLSID_MTBZoomEventSink =
    {0xece98785,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBConnection =
    {0xece98714,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBComponent =
    {0xece98712,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBLightPathNode =
    {0xece9874d,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBDevice =
    {0xece98711,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};
extern "C" const GUID __declspec(selectany) IID_IMTBRoot =
    {0xece98710,0x4e0e,0x42eb,{0x8a,0x82,0x0b,0x87,0x71,0xa2,0xc3,0xca}};

//
// Wrapper method implementations
//

#include "f:\userdata\wenxu_data\program\eric roller's previous program\program\debug\mtbapi.tli"

} // namespace MTBApi

#pragma pack(pop)
